// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/fields.toml (608B)
// ../definitions/info_object_meta.toml (836B)
// ../definitions/info_storage_meta.toml (107B)
// ../definitions/operations.toml (3.875kB)
// ../definitions/pairs.toml (1.381kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x44\x0a\x8a\x08\xa1\xb5\xbd\x09\x0b\x89\xcf\x9a\x1d\x04\xe1\xeb\xd1\x9d\x13\xdd\x39\xbe\xd2\x6f\x9e\x77\xf6\x76\xdb\xda\x5b\xc3\xd3\xa8\xab\xbb\xd5\xfa\xfe\x10\xba\xaf\x07\x2a\x84\x01\xeb\xa6\xd9\xb6\xd6\xe7\xd4\x09\x1b\xf6\x67\xec\xd7\xfc\x5d\x00\x39\xc5\xb4\x77\xd6\x7e\x52\x20\x63\x05\xa6\x06\x1b\x7a\xfd\xcd\xdc\x06\x46\x7a\x54\x4a\x86\x1b\x06\xc8\x5e\x1f\x95\x12\xc3\x61\xa6\xdf\xde\x24\x26\x47\xad\x95\x86\x0c\x9f\xda\x4f\xed\xd2\xf4\xb0\xdb\xb9\xb2\x32\x25\xd8\xb5\x5e\x1e\x63\x14\x43\xf1\xec\xe7\xf8\x39\x71\x70\xc6\xc1\x33\xe7\x47\x6d\xa7\xd1\xe6\x72\xd9\x51\x9c\xe8\x45\xa5\xd7\x04\xdd\xfe\xb4\xb2\xad\xa3\xab\x8d\x77\x0a\xcd\x69\xdd\xe2\x80\x9b\x4b\x32\x69\xb6\x10\x50\xae\xe2\x0c\xd0\xa5\x12\xa3\x6f\x1c\x6a\xcd\x3f\x19\xbe\xc2\x98\xdc\xff\x00\x00\x00\xff\xff\xec\xb9\x4c\x6e\x60\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x49, 0x23, 0x77, 0x93, 0x92, 0xdc, 0x60, 0xa, 0xe6, 0x7d, 0x32, 0x65, 0xf9, 0xd6, 0x3e, 0x59, 0x1b, 0xac, 0xbc, 0xc4, 0x1c, 0x8e, 0x22, 0x8b, 0xd5, 0x2, 0x19, 0x56, 0x3a, 0x34, 0x45}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x6f\xdb\x40\x0c\xc5\x77\x7d\x0a\xc2\x8b\x27\x75\x6a\xbb\x79\xf3\x52\xa0\x46\x0b\x24\x41\x06\x23\x08\xce\x3a\x4a\x62\xa4\xfb\x13\x92\x72\xe2\x6f\x1f\x9c\xfe\xc4\x82\xe4\x21\xc8\x24\x1d\x1f\xef\xfd\x78\x8f\xc7\x22\x78\x45\xaf\x79\x8b\xbe\xd2\xfa\x29\xd3\x4b\x44\xd8\xc1\x86\xbc\xfe\xfe\xb9\xc9\xb2\xcf\x06\x67\x7f\x5d\x55\x51\x26\x5f\xcd\xe5\xa4\xdc\xd2\x51\x4d\x75\xab\x4e\x76\x5d\xc5\xf7\x18\x58\x61\x07\xca\x1d\x66\x16\xa5\x60\x8a\x4a\xc1\xa7\xa6\x3f\x7b\x20\x01\xad\x11\x3a\x4f\xaf\x1d\x42\x83\x17\x20\x0f\xa2\x81\x4d\x85\x3f\x92\x69\x6b\x44\x73\x17\x2c\x95\x84\x33\x7f\x25\x87\xbd\x4c\xbe\xc9\xd5\x70\x85\xba\x86\x2f\x70\x7f\xc9\x37\xf7\x7d\xeb\x84\x95\x8b\x4b\x06\x30\x18\x40\x19\x18\xfa\x73\x38\xbd\x60\xa1\x3d\xdf\x05\x3b\x0b\xe1\x5f\x2f\x1c\x82\xc5\xe5\xd3\xb2\xa3\xeb\x5a\xa5\x68\x58\xf3\x5b\x41\x2c\x66\x39\x4c\xcd\xd7\x0c\xd2\x09\xc8\x42\x28\x87\xdf\xd9\x10\xd1\xcc\xf7\xf8\xa5\x6c\xff\x1b\xad\x93\x33\x92\xd6\xc8\x3d\xc0\x9c\x24\xb4\x9d\x26\x92\xd6\x10\x86\x22\x63\x6b\x94\xce\x63\x51\xc3\x9b\x61\x2b\xd3\x06\xb6\x02\x8f\x81\x9b\x3d\x31\x58\x8c\xe8\xad\x40\xf0\xd0\x09\xf2\x56\x80\x7c\xec\x86\xf1\x04\xf9\x4c\x05\xe6\x0e\xd5\x58\xa3\x66\x39\xea\xf3\xf8\x71\x26\xae\x82\xb8\x1b\xee\x1e\xc6\xab\x3d\x19\x05\x46\x4b\xb0\x58\x92\x47\x0b\x93\x75\xc2\x25\xfe\xb7\x58\x0f\x82\xbc\x04\x25\xb3\x35\xe5\x23\x00\x00\xff\xff\xb5\xd6\xb8\x28\x44\x03\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x5e, 0xbf, 0x7c, 0xff, 0x6b, 0xcb, 0x89, 0x95, 0x44, 0x7e, 0x51, 0xa0, 0xa9, 0x6a, 0xd5, 0xb8, 0x74, 0xbb, 0xbd, 0xec, 0xe, 0x8d, 0x41, 0x5a, 0x18, 0xc2, 0x79, 0xc1, 0x65, 0x73, 0x51}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xce\xc9\x4f\x4e\x2c\xc9\xcc\xcf\x8b\xe5\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x2a\x2e\x29\xca\xcc\x4b\x57\xe2\xe2\x8a\xce\x4b\xcc\x4d\xc5\x14\x4f\xad\x28\xc8\x2f\x2a\x51\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x8a\x2e\xcf\x2f\xca\xd6\x4d\xc9\x2c\x22\xa4\x12\x10\x00\x00\xff\xff\x5f\xe0\xd4\x5a\x6b\x00\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xd1, 0x40, 0x2c, 0xba, 0x2b, 0x76, 0x2b, 0x8d, 0x58, 0xb2, 0xa, 0x71, 0xa7, 0xb1, 0xb5, 0x96, 0x12, 0x28, 0xb9, 0x77, 0x6d, 0x13, 0xc5, 0x3a, 0x98, 0x62, 0x3e, 0x73, 0xf2, 0x73, 0x74}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xbb\x8e\x2b\x37\x0c\xed\xfd\x15\xc4\x34\x69\x8c\xed\x52\xde\x22\x09\x90\x2e\x48\x90\xf6\x62\xb1\xa0\x35\x1c\x5b\xb9\x1a\x49\x90\x34\x76\x9c\xaf\x0f\x48\xcd\xd8\xf3\xb6\xbc\xc5\xc2\x96\x48\x9e\xa3\xc3\x87\xe4\xef\xe8\x3d\xd9\x9a\xc2\xe7\xa1\xa6\xa8\x82\xf6\x49\x3b\x0b\xdf\xa0\xd2\x11\xd2\x85\x40\xdb\x44\xa1\x41\x45\xd0\xb8\x00\xbf\x88\x35\x04\x32\x98\xa8\x06\xe7\x29\x20\x3b\xc4\x8f\xea\x70\x78\xc4\xfa\x70\xfe\x43\x05\xc2\x44\x5f\x79\x69\x11\xfc\xa6\x8d\x81\x6c\x02\x68\x21\x5b\x81\x3b\xfd\x43\x2a\x7d\x54\x07\x8f\x01\xdb\x08\xdf\xe0\x7b\xe5\x31\x5d\xaa\xcf\x43\xa0\xd8\x99\x94\x97\x5c\xf5\x39\x03\xbb\x05\xfd\x02\xab\x47\x50\xce\x26\xb2\x09\x92\x7b\x01\xeb\xaa\x23\x54\x81\xff\x45\xfd\x1f\xcd\x08\x58\x21\x70\x32\x4e\xfd\x28\x15\xee\x57\x36\xde\xd2\xad\x8f\x34\x92\x4d\x56\xf6\x55\x03\x4b\x37\x10\xbb\xf7\x74\x1b\x81\x65\xd9\x76\xb0\xc4\x60\x22\x5a\x46\xdc\xd5\xea\x08\xd5\x49\xd7\x7b\x92\xc9\x41\x5d\x7b\xd2\x76\xff\xa4\xd9\x24\x43\x46\x16\x54\xb2\xb6\x99\xae\x93\xae\xe3\x1c\xc6\xe8\x98\xf6\x30\x78\x7f\x00\x38\x91\x71\xf6\xcc\xc7\x4c\x17\x1d\x37\x70\xa6\xc7\x3a\x69\x01\x54\xce\xeb\xd2\x4a\xf8\xcd\xf9\xbb\x64\x3d\x3b\x65\x2d\xfc\x7d\x4b\x02\x7f\xe7\x33\xff\x29\x5c\xc0\x05\x68\x3b\x93\xb4\x37\xd4\xd3\x03\x6d\x05\x23\x52\xb8\x6a\x45\x53\xb6\x31\x28\xd6\xa5\x8e\x49\x58\x36\x94\xd4\xa5\x94\xe6\xef\x6c\x2c\x3c\x7b\x37\x26\x2a\x1f\xd7\x99\xca\x16\x34\xc1\xb5\x80\x70\xd6\x57\xb2\xd0\x05\xc3\x62\x72\x25\xae\xd4\xe6\x11\xaa\x2e\x18\x21\xd6\xba\x6b\x29\xad\x3f\xdc\x95\x84\x95\xf8\x30\x27\xfe\xb0\x4e\x89\x77\x9e\x05\xf3\x8e\x52\x59\x64\x0c\xa9\x98\xd6\xe0\xb0\xd5\xe2\xa3\x88\xa3\x36\x7f\xac\x16\xb4\xfa\xc3\xb6\xb0\xcf\x67\x88\xb9\xd7\x5f\x00\xae\xf4\xfb\x06\xec\xb2\xe7\xb5\xad\xe9\xdf\xd5\xae\x9f\x9f\xdd\xb5\xde\x50\xc1\xe9\x7b\xbb\x31\x09\xe8\xbc\x71\x58\x03\xe6\x59\x1e\x53\xe8\x54\x7a\x36\xc8\x0a\x47\xf6\x8a\x6b\x34\x64\x32\xbc\xa0\x20\xd3\x41\x22\xcc\x87\xc3\xa6\x2c\x53\x01\x7c\x9e\x0f\x1e\xcf\xa5\x95\xf4\x17\x9e\x69\xa5\x88\xe0\x76\xd1\xea\x02\xb1\xf3\xde\x71\x95\xa1\xad\x5d\x9b\xf3\x25\xf5\x25\x08\xa3\xca\xe2\xef\x05\x45\xc5\x66\xef\x5d\x1f\x0f\xa0\x5c\x50\xdb\x38\x8b\x5a\x8a\x9e\x94\x6e\xb4\x02\xd7\x34\x91\x5e\xd6\x53\xb6\x5a\x2d\xa8\x40\x58\x3e\xc8\xfe\x66\x63\xd1\xa8\x77\x63\xf2\xf2\x71\x9d\xb7\x0f\xee\xaa\x6b\x16\xe8\x86\xf7\x63\xaf\xbb\x42\x0b\xe2\x23\x00\x85\x82\x0d\xe3\xad\x9f\x38\x4b\xbe\x1c\xb5\x45\x6d\x13\x6a\x3b\xaa\xf1\x98\x5c\xe0\xbc\xf4\x7e\x79\x80\x0c\x41\x9e\x39\x2e\x48\x6f\x1f\x29\x80\xb6\x31\xa1\x9d\x4f\x3d\x8b\xed\xfc\x69\xc3\x1e\x34\x61\xcd\x80\x35\x71\x23\xae\x03\xe6\x3d\xc0\x42\xb0\x69\xe0\x33\x6d\x74\xde\x99\x12\x20\x5c\xd1\xe8\x7a\x19\x58\xf2\xba\x3a\xc7\x8b\x4f\xc4\x9d\xbd\xd3\xf3\x68\xcc\x12\x36\x42\xc7\x0f\xce\x3c\x00\x9e\xf0\x53\xb0\xdc\xf0\x83\x6f\x59\x89\xce\x12\x9e\xf3\xdd\x47\x28\x95\xff\xf1\x46\x90\x2b\x78\x21\x8e\xfc\x8d\xea\x74\x0a\xd0\x52\xc2\x1a\x13\xae\x43\x04\x4a\x5d\xb0\xa0\xba\x10\xb8\x95\x1f\xba\x0c\x5e\x23\x0d\x06\x14\xde\x5a\xa0\x6c\x6b\xde\x23\x64\xe9\x9f\x83\x62\xfa\x72\x98\x1f\xc1\xa3\x0e\xfd\xaa\x2c\xe7\x81\xee\xea\x71\x01\x0c\x7b\x4e\x2f\xd8\x04\xc2\x8d\xdf\x0a\xbc\x23\x59\x6a\xb4\xa1\x9f\x22\xf4\x67\x5c\xa5\x71\x84\xea\xb6\xc2\x65\x36\xc4\xf8\x7a\x74\x5f\x0a\x8d\x39\xa1\xfa\xb1\xc2\xcf\x2e\xe8\x59\xba\x15\x34\xf8\x7c\x12\xcd\x35\x5a\xe8\xb0\xc0\x89\x09\x37\x92\xc2\x3b\x80\x92\x04\x1e\xdf\xdc\x91\xda\x36\x0e\x5c\xb3\xf6\x0a\x7f\x1f\x59\x2e\x88\xbd\xbb\x83\x75\xef\x5f\xfd\x92\x8a\x9d\x1c\x8c\x7f\xa9\xcd\x73\xd1\x5f\x41\x5f\xe9\xee\x25\x27\xc3\xf7\xb6\xfe\xb9\x28\x31\xff\x07\x00\x00\xff\xff\xa0\xab\xb0\x66\x23\x0f\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xc7, 0xf4, 0x16, 0xe4, 0xb, 0x60, 0x6e, 0x28, 0x91, 0x30, 0xa4, 0xc0, 0x44, 0x2d, 0x1f, 0x65, 0x4f, 0xb5, 0xbc, 0xe2, 0x77, 0x9a, 0x45, 0xc2, 0x11, 0xe3, 0x4a, 0x6f, 0xe9, 0x6b, 0x15}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\x9c\x57\xbb\x17\xe0\xc6\x09\x09\x09\x89\x95\x56\x02\x4e\x08\x45\xae\x3d\xde\x8c\xea\x78\xcc\x78\xd2\x10\x7e\x3d\xb2\x93\xb6\x01\xb6\xdd\x85\x5b\x65\xcf\xfb\xde\xcc\x1b\x37\x5f\x2d\x47\xc5\xa8\xdd\xe0\x5e\x7f\x6b\x74\x4e\x08\x6f\xa1\xcd\x2a\x14\x1f\xdb\xa6\x39\x5d\x97\x9b\x4b\xf7\x14\x47\xa3\xc4\xb1\x53\xde\x63\xfc\xbb\xca\x61\xb6\x42\xa9\x94\xd4\xe3\x84\x96\xfc\x0c\xda\x23\x6c\xe5\x50\xe5\xe0\x59\x20\x50\xd6\x4a\x17\x74\x18\x95\x4c\x78\x31\xb5\xe7\x09\x94\x21\x09\x1f\xc8\x21\x9c\x09\x15\x9c\x51\x0e\x64\x11\xca\x4f\x65\x31\x8f\x58\x6c\x30\xba\xc4\x14\xf5\x7f\x4d\x8e\xfa\x6b\x16\x3f\x12\xc9\x26\x41\x8a\x7a\x91\x3e\xf5\x18\x6b\x3a\xa3\x04\x10\xd4\x51\x22\x3a\xd8\xcd\x20\x68\x6c\x0f\x13\x85\x00\x0b\xaf\x90\x29\x2a\x8a\xc5\xa4\x2c\x67\xfc\x87\xf3\x61\xa9\x29\x79\x76\x03\xbb\x4d\x03\x1f\x29\xeb\x3d\xbb\x8a\x08\x6c\xeb\x06\xfe\x69\x75\x47\xd1\x95\xa1\xa3\x19\x9e\x78\x34\x57\x98\xab\x16\x8a\xb0\x00\xd8\xfb\x8c\xfa\x5b\x6a\x6f\x5e\x5d\x24\x2c\xd5\xb5\x1f\xed\x29\x83\xe0\xf7\x11\xb3\xde\x9c\xb0\x35\xb9\x8c\xb8\x2f\xcb\xab\x25\xab\x64\x87\x9e\x05\x4b\xbe\xae\xd8\x26\x43\xd2\x25\x0e\x64\xe7\xb3\xf7\x83\x21\x79\xa8\x67\xa5\x64\x18\x83\x52\x32\xa2\x1d\xb9\xa7\xfe\x17\xc4\x9d\x35\x21\xec\x8c\xdd\x6f\xb6\xc2\xef\xd6\xb3\x2b\xbb\x37\x0a\xca\x8e\x01\x0f\x28\x33\x28\x0d\x08\xd3\xd2\x1a\x38\xa3\x06\xbc\xf0\x00\x99\x47\xb1\x35\xa2\x4c\x3f\xf1\xa5\x01\x95\xda\xe7\xe2\xe1\x18\xe6\xc5\x2d\xd0\x40\x8a\x0e\xd6\x4f\x40\x75\x2f\x8e\x13\xcb\xbe\x73\x24\xcf\x6e\xb6\x6d\x9b\xed\x72\x8b\x0e\x1c\xc9\x85\x07\x73\xb3\x4e\xcc\x09\x65\x79\x58\xb5\x9f\x5d\x99\x3d\x18\xa5\x03\x9e\xb6\xe6\x48\x6e\x9b\x63\x1b\x70\xff\xe5\xd3\x67\xc8\x6a\x44\x61\x22\xed\xe1\xae\x1a\x2c\xb0\xe3\x68\xab\x5d\xde\xc8\x8e\x74\x87\xde\x8c\xa1\x84\x0e\x77\x40\x1e\x22\x2b\x64\xd4\xdb\xe6\x3d\x0b\xf8\xfc\x27\x02\x6a\x63\xd1\xf1\x94\x21\x05\xa3\x9e\x65\xb8\xa9\xf3\xed\xb0\x37\x07\x62\x01\xca\x30\x46\x87\x9e\x22\xba\xdb\xa6\x6d\xdb\x5f\x01\x00\x00\xff\xff\xe3\x4d\xb1\x49\x65\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xbb, 0xd3, 0xf9, 0x76, 0x45, 0xb9, 0x84, 0x6d, 0xe1, 0x7a, 0x3e, 0xef, 0x80, 0x27, 0x12, 0xbe, 0x28, 0x7d, 0x34, 0x2d, 0x3b, 0xf8, 0x7f, 0xef, 0x67, 0x2, 0x51, 0x7a, 0xe3, 0xb0, 0x6b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
