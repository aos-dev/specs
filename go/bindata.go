// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/infos.hcl (1.31kB)
// ../definitions/operations.hcl (4.412kB)
// ../definitions/pairs.hcl (2.243kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x3f\x73\xdb\x30\x0c\xc5\x77\x7d\x0a\x1c\x97\x4c\xca\xd4\x74\xcb\x54\x77\xe8\x90\x6b\x06\xdf\x75\xec\x21\x22\x6c\xa1\x16\x09\x95\x7c\x6a\xea\xf6\xfa\xdd\x7b\x94\xec\xf3\xbf\x5a\x69\xe2\xc9\x22\xf1\x7e\xef\x91\x80\x54\x69\x5c\x19\x39\x7b\xfa\x26\x0d\x1c\xb9\x20\x60\x47\xae\xb1\x08\x89\xa8\x83\xbf\x73\xf4\xbb\x22\xc2\xb6\x17\xda\xff\xee\xc9\x65\x24\x8d\x6b\x57\x11\x79\xcd\x7d\xc7\xdb\xaf\x91\x83\x94\x9d\x0f\x93\xf4\x61\x71\xe7\xaa\x3f\x2f\xe0\x0b\xf5\x88\x7f\xc4\xbd\xa6\x14\xf0\xfa\xb5\x89\x3e\x2e\x79\x86\xa8\xfe\x94\x77\x82\x92\x9f\xbd\x25\x94\x45\xa4\x41\x2a\xa2\xc6\x42\x90\x88\x52\xf5\x69\x41\x9a\x09\xad\xd0\x10\xf5\xfb\x20\xb4\x91\x2d\x69\xa4\x0c\x4b\xbc\x96\xdb\xeb\x96\xc1\xbc\x9c\x98\xde\x93\xfb\x3c\xd6\x3c\x94\x9d\x83\xef\xce\xf6\x1a\xa7\xe7\x84\x7a\x36\xff\x51\xdc\x47\x4e\x38\x44\x2e\x52\x52\x4f\xb6\x9a\xfe\x4e\xe8\x99\xcc\x3d\xa3\x7d\xe3\x45\x3d\x32\xda\xe2\x2b\x8a\x56\xd2\x68\xcf\x4f\xd9\xba\x01\x25\x07\x5a\xb2\x69\x31\x49\xc7\xd0\x1f\xbb\x45\xd8\x33\x27\x9f\xf7\xd7\x79\x93\xe9\x8b\xa5\xcd\x42\x13\x79\xe9\x25\xfa\x4c\x16\x69\xc8\x92\x6e\x32\x69\xec\x87\xb9\xf0\x59\x7f\x9d\xcd\x99\x46\xbc\x7f\x37\x23\x98\x4c\xeb\xa6\xe3\x9c\x5f\x37\xa1\xe0\xb4\x16\xfc\x5f\x4f\x96\x63\xed\xbe\x27\x79\x1b\x3a\x8d\x1b\x9a\x08\xb4\xb2\x44\xe3\xf3\x8b\xbd\x19\x7a\xcf\x10\x5f\x33\x4e\xa3\x42\x83\xdc\x2e\x35\xc8\x41\xba\x3b\xd8\x41\xdb\x59\xc3\x50\x8b\xf3\x87\xbc\x90\x95\x77\xeb\x7c\x84\x2f\xa6\xe1\x6c\x7c\x2f\x20\xcf\x96\x36\xb5\xd7\xf4\x76\x50\x06\x43\x33\xb4\x19\x3f\x2a\x43\xc4\x6c\x97\xff\xad\x9b\x19\x8e\xbf\x01\x00\x00\xff\xff\x58\x43\x7e\x1f\x1e\x05\x00\x00")

func infosHclBytes() ([]byte, error) {
	return bindataRead(
		_infosHcl,
		"infos.hcl",
	)
}

func infosHcl() (*asset, error) {
	bytes, err := infosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x27, 0xa5, 0x36, 0x2f, 0xa6, 0xb4, 0x25, 0xc7, 0xd4, 0xe4, 0xf, 0x6f, 0xf9, 0x58, 0xcb, 0xa9, 0xf0, 0x6c, 0xf0, 0xc5, 0x40, 0xee, 0x9d, 0x58, 0x16, 0x77, 0x3c, 0x8, 0x9b, 0x82, 0x9e}}
	return a, nil
}

var _operationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xc1\x8e\xe3\x36\x0c\xbd\xe7\x2b\x08\x5f\x0a\x2c\x82\x9c\xda\xde\xf6\xd2\x05\x0a\xf4\xb0\xe8\x62\xe7\xd0\xc3\x62\x11\x30\x32\x9d\xb0\x6b\x4b\x86\x24\x27\x9d\x2d\xe6\xdf\x0b\xca\x76\x1c\xd9\xb2\x26\xd9\xe9\x1c\x06\x88\xf4\x48\x3e\x52\x8f\xa2\xbc\x61\xed\xc9\x56\xa8\x08\x0a\x6c\x5b\xd2\x25\xd9\x02\xfe\xdd\x6c\x00\x4c\x0b\x85\xb2\x84\x9e\xf6\xfd\x8e\xac\x03\x00\xb4\x68\xb1\x71\x00\xef\xe1\x4b\xd1\xa2\x3f\x15\x5f\xc3\xb2\x25\xd7\xd5\xde\x85\x65\x13\xd6\x5e\x06\x2f\x17\xcb\x59\x27\xa6\xd8\x42\x61\xe5\x9f\xe3\xef\x94\x70\xa7\x07\x77\x2f\xb7\x74\x0f\xb5\x51\xdf\x52\x6c\xc3\xc6\x1b\xc9\xae\xfa\x98\x71\xdd\x42\x71\xe0\x32\x43\x79\x60\x66\x9a\x03\xeb\xb4\xdb\xab\xd7\x03\x97\x2e\xb2\xaa\xd9\xf9\x1c\x93\x65\xd4\x03\xa7\x2a\xa5\x4c\xcb\x7d\xa1\x00\x4a\x72\xca\x72\xeb\xd9\x68\x78\x0f\x05\x3b\xf0\x27\x82\x09\x5c\x19\x0b\x1f\x4c\xfb\xbc\x2b\xae\x55\x35\xed\xf3\x18\x7f\x66\x7d\xe1\xba\x06\xd9\x07\xd4\xf0\xe7\xe1\x6f\x52\x1e\x8c\x85\xa6\xab\x3d\xb7\x35\x81\xe9\x97\x58\x87\x20\x8e\xec\x99\x15\xed\x8a\x28\x15\xf9\x13\xea\xce\x2a\x29\x42\xe9\x7c\x2a\x85\x8a\xbc\x3a\x3d\x92\xc3\xef\x62\x30\x25\x11\xec\x73\x59\x04\x00\x54\xd6\x34\x80\x70\xe4\x33\x69\xe8\x6c\x0d\xde\x80\xa8\x66\x85\x73\x10\xd4\x16\x8a\xce\xd6\x29\xd2\x8d\x39\x3f\x42\xf9\xa3\x39\xd3\xc4\x58\x8c\x73\x84\x65\x5f\xca\xfe\xff\xd5\xb8\xc5\x63\xaa\x9d\x64\xf9\x8d\xdd\xb4\xe6\x62\xd9\x4c\xa6\xaa\x1c\xf9\x7b\xaf\x80\x16\xad\x4f\x53\xb6\xfe\xcd\x94\xd3\x2e\x96\x94\x59\x97\xf4\xcf\x3d\x37\x40\x5b\x53\xda\xf1\xd5\xaf\xec\x25\xae\x80\x75\x2e\xcb\xa8\x6d\xf2\x06\xb0\x84\x8f\xb5\xcf\x67\x31\x98\xc4\x18\xec\x73\x6a\x6c\xad\x39\x73\x49\x80\x70\xc1\xe7\x2d\x5c\x4e\xac\x4e\xa0\x50\x43\xb0\x0c\x01\x7a\xa1\xe6\x3a\x29\xce\x66\xdc\x5a\x69\xae\x41\xe9\xe9\x9c\x24\x72\x83\xac\x3d\xb2\x1e\xae\x23\xb4\x1e\x9c\x37\x16\x8f\xd7\x2e\x71\x37\x97\x5c\x10\x4e\xf6\x9a\x0b\x08\x40\xd0\x74\x19\x1d\x59\x60\xed\x3c\xea\xd5\x86\xd3\xd8\xcc\xe7\xd9\xb5\x17\xbd\xb1\x14\x9d\x75\x49\x22\x90\x1c\x87\x1e\x01\xf8\x78\xfc\x31\xc6\x91\x7c\x2e\xc0\x91\x3c\x20\x9c\xb1\xe6\x72\x19\x23\x08\x23\x7f\xc1\x3c\x94\xaf\x68\x3b\x47\x46\xf6\x01\xeb\x7a\xc9\xc4\x41\x27\x0f\x15\xf0\x27\x76\x33\x46\xcb\xb0\xc9\x86\x70\x1e\x3d\x3b\xcf\x8a\x51\xdf\xdf\x15\x4f\xa3\x15\xd6\x93\x74\xdc\xb4\x98\x1f\x93\x9d\xf6\x23\xd9\x9f\x1c\x5c\xcd\xdc\x16\x5c\xa7\x4e\x80\x0e\x9e\xf8\x3b\x6d\xe1\x83\x20\x57\xd3\x19\xac\xd2\x49\xf5\x75\xba\x3f\xa1\x59\x43\x4c\x49\xdd\xaf\xc5\xeb\xe0\x0f\xb3\x33\x2f\x8f\x6b\x97\x8f\x12\x68\xc8\x63\x89\x1e\x73\x81\x2c\xf9\xce\x6a\x50\x9d\xb5\xa4\xfd\x24\x86\xd1\x76\xa5\x52\xb2\xfd\x90\xdc\x86\x38\xbd\xea\xc0\xb5\xa4\xb8\x62\xf5\xea\xf8\x4f\xab\xdd\x70\x14\xdb\x12\x96\xf9\xd8\x58\x86\xe3\xa9\xb8\x16\x71\xdc\xe4\xb5\xf6\xe6\xb8\x0c\x91\x5b\x64\x3b\x6c\xf7\x0a\x89\x27\xe9\xb6\x0f\xbe\x57\x58\xd7\x07\x54\xdf\xf6\x55\xa7\xd5\x0a\xe9\x78\x62\x89\xd4\x72\x9c\x65\x1f\x30\xd4\x47\x9e\x49\x72\x75\xb0\xae\x0c\x98\x6a\x7a\x96\xfc\x40\xe1\x96\xb3\x38\x47\x22\x00\x42\xb9\x44\xd9\x06\x30\x54\xf0\x95\xd2\xcd\x3f\x35\x16\x25\xec\x25\xb6\x57\x35\x3a\x27\x58\x65\xb4\x27\xed\xf7\xfe\xb9\xa5\xdb\xdf\x4d\xf9\xcb\x0f\x15\xf8\x65\xb3\xa9\x98\xea\x52\xde\xfc\x7d\x76\xe2\x59\x92\x7a\xf7\x9b\x3c\xf7\xff\xf0\x64\xd1\x1b\x5b\x6c\x5e\x26\x60\x19\x23\x9d\xb7\xac\x8f\x31\xc2\xc5\x90\x2f\x5f\x17\xa0\x72\xec\x81\x55\x37\x64\x6d\x8c\x20\x6b\x23\x26\xfd\x7b\x27\x82\xb0\xf6\x37\x80\xd0\x79\x71\x56\x4f\x7d\x45\x3f\xca\xce\x04\xd4\x0b\x2f\xbf\xfe\x7c\xbb\x2d\xc3\x24\x4f\xd6\xcc\xe2\xf4\x57\xd1\x2d\xa0\xef\x82\x6c\x1c\x33\x3f\x83\xde\x4b\xe2\x10\x82\x50\x62\xf0\x6e\xb7\xfb\x84\x1c\x83\xe4\x11\x37\x3b\x88\x77\x9f\xe4\x0d\x77\x0b\xf2\xa7\x57\x72\x6b\xe7\xb4\xc4\x45\x82\xd4\xec\xb8\xd8\xec\x3e\x13\xca\x67\xfc\x04\x71\x74\x8c\x41\x4f\x74\x6c\x28\x3a\x34\x37\x8f\x36\x40\x12\x01\x43\xe7\x64\x2b\x2a\xdf\x19\xf9\xe4\xa6\x39\x96\x14\xca\x75\xd0\x46\x26\x0b\x8a\xc3\x28\x48\x71\x0c\xaf\x8d\x38\xe7\x71\x3a\x4e\x28\x79\x5a\xe6\x79\x5e\x16\xc5\xfd\x4b\x6e\x9c\xe0\xe4\xbf\x00\x00\x00\xff\xff\x74\x14\xa5\x3c\x3c\x11\x00\x00")

func operationsHclBytes() ([]byte, error) {
	return bindataRead(
		_operationsHcl,
		"operations.hcl",
	)
}

func operationsHcl() (*asset, error) {
	bytes, err := operationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xd3, 0xaf, 0x8e, 0xbe, 0x48, 0xfc, 0x8a, 0x7d, 0x2c, 0x3b, 0x84, 0x18, 0x2b, 0xc7, 0xcd, 0x33, 0xa5, 0x30, 0xde, 0xb4, 0xfb, 0x95, 0xdd, 0xc0, 0xe4, 0x9c, 0x9b, 0x90, 0x4d, 0xf1, 0x4d}}
	return a, nil
}

var _pairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x7c\x4a\x8a\xd4\xb9\xb4\xbd\xe5\xd2\x02\x05\x02\x34\x68\x80\x76\x4f\xbb\x0b\x81\x26\x47\xf6\xc0\x14\x87\x3b\x1c\xd9\xf1\x2e\xf6\xbf\x2f\x48\x49\xb6\xe2\xc8\x5e\x23\x39\x04\x96\xe6\xf1\xbd\xa7\xf9\xe0\xcc\xa2\x21\x81\xb9\xe5\xa0\x18\xb4\x6a\xdc\xef\x73\xf8\x36\x03\xd0\x7d\x44\x78\x80\x79\x52\xa1\xb0\x9a\xcf\xbe\x9f\x00\x73\xfc\x0a\xe4\x8b\x8e\x40\xfd\xdf\xc3\x21\xb6\xf8\xab\xc7\xcc\x00\x1c\x26\x2b\x14\x95\x38\x8c\x10\x40\x01\x8c\xf7\x20\xf8\xa5\xc5\xd4\x03\x6b\xd3\x7a\x3d\xa5\xfa\xd3\xd8\xcd\x4a\xb8\x0d\xee\xe6\xf6\xb5\x09\x0a\xad\xc9\xb4\x95\xf2\x06\xc3\xa4\x9f\xc1\xfb\x1b\x1b\x29\xa2\xa5\x7a\x0f\xba\x46\x18\x73\x41\xe1\x82\x9a\x05\x3c\x25\xad\x1c\x09\x0c\xbf\xa3\x60\x4d\x2f\x8b\x91\x09\x41\x87\x41\xc9\xf8\x49\xf1\x5f\x8e\xf1\xc5\xb3\xf0\x96\x1c\xca\x05\x2b\x6b\xde\x81\x32\xc4\x0e\x09\xc7\xc3\xc5\x4d\x42\xd9\x92\xc5\x6c\x26\x29\x8b\x59\x61\xa6\x8a\x46\x12\xca\x31\xfd\x23\xc1\x1c\x39\x5a\xc5\xe0\x22\x53\x98\xae\xda\x10\x7c\x87\xcb\xe1\xe8\xf5\x1e\x8f\x62\x27\x0e\x5f\x22\x09\x4e\xfa\xcb\xbe\xcf\x3b\xda\xad\x31\x94\x3a\xb6\x92\xfb\x49\x5b\x09\xe8\x60\xb9\x07\x41\x63\xd7\xb0\x23\xef\xa1\x27\x7f\xeb\xa6\x3c\x3e\x66\xfe\xc1\xc7\x5a\x35\x56\xd6\x53\x1e\x06\x2e\x62\x69\xba\xba\x19\xd8\xe1\x16\xff\xf6\xb8\x09\x93\x18\x0f\x7d\xd6\xb3\x95\x54\xe5\xe7\x4c\x00\x1d\xc3\x51\x9e\x82\xa2\x58\x8c\xca\xf2\x7a\x0c\x1f\x47\x81\x03\xba\xf4\x65\xc3\xee\x64\x64\xff\xa1\xa4\x4f\xf9\xed\x11\xc8\xb6\xf4\xf7\xfb\xa7\x64\x60\x38\x5b\xe9\x41\x2a\x98\x66\xba\x8c\x57\xc9\xf4\x74\x50\x58\x0e\x9c\x5c\xd7\x09\xa7\x9b\x97\x82\xfe\xf1\xdb\x05\xd2\xee\x68\x9f\x74\x4a\xc3\x8d\x73\x77\x50\x2a\x0d\x92\x10\x37\xb9\xaf\x0b\xa4\x3f\xb2\xc4\x9a\x05\x73\x1b\xb9\x0b\x9d\x93\xc5\x07\x9b\xf9\x7f\x15\xd9\x93\xdd\xbf\x2e\xc8\xb3\x21\x79\xee\xde\x8f\xc0\xa2\x15\xb9\xcb\x97\x6d\x16\xaf\xac\xf1\x7e\x69\xec\xa6\xaa\xdb\x60\x27\x93\x90\x03\x37\x1f\x3f\x2f\xf7\x8a\xb7\x17\x47\xc5\x28\x28\x3b\x06\xdc\xa2\xec\x41\xa9\x41\xd8\x75\x9f\x08\xce\xa8\x81\x5a\xb8\x81\xc4\xad\xd8\x51\xf6\x13\x7d\x3d\x3b\x98\x17\x73\x9f\x0f\xfe\x2c\xf3\x1c\xfc\xbe\x33\xe0\xa9\x21\x45\x07\xfd\x2a\x2a\x86\xae\x4c\x7c\xcf\x58\x59\x6f\x52\xba\x9c\xd1\x36\xa1\x54\x66\x85\x67\xee\xc2\xeb\x36\x46\x9b\x94\x1b\xc8\x54\xbf\x16\xaa\x2e\x6f\xa7\xb3\xbc\x63\xd9\xe4\x0d\xf2\x7e\xa1\xcc\x00\x79\x07\x4d\x0f\xdd\x5d\x5f\x47\x8e\x28\xdd\x70\x96\x94\x2e\x73\x45\xbd\x51\xda\xe2\xa1\xa7\x1d\xc9\x02\x06\x43\xf0\xf4\xe1\xbf\xff\x21\xa9\x11\x85\x1d\xe9\x1a\xee\x8b\x40\x47\x36\x54\xa7\x97\x4b\xa3\x63\x03\xfb\xb0\xaa\x95\xe1\x1e\xa8\x86\xc0\x0a\x09\x75\x01\x9f\x02\xfc\xcd\x02\x75\x3a\x65\x81\xe2\x2d\x38\xde\x25\x88\xde\x68\xcd\xd2\xdc\x95\x4f\x5c\xe2\xda\x6c\x89\x05\x28\x41\x1b\x1c\xd6\x14\xd0\x95\x25\xfb\x23\x00\x00\xff\xff\x38\xf9\x8f\x11\xc3\x08\x00\x00")

func pairsHclBytes() ([]byte, error) {
	return bindataRead(
		_pairsHcl,
		"pairs.hcl",
	)
}

func pairsHcl() (*asset, error) {
	bytes, err := pairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xc9, 0xd5, 0x5d, 0x4a, 0x76, 0x33, 0x88, 0xee, 0xcb, 0xf, 0x89, 0x1b, 0xb2, 0x77, 0x39, 0x7a, 0xbc, 0x16, 0x17, 0x5, 0x3e, 0x40, 0xca, 0xe5, 0x52, 0xd2, 0xeb, 0x1b, 0xe1, 0xb3, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infos.hcl":      infosHcl,
	"operations.hcl": operationsHcl,
	"pairs.hcl":      pairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infos.hcl":      {infosHcl, map[string]*bintree{}},
	"operations.hcl": {operationsHcl, map[string]*bintree{}},
	"pairs.hcl":      {pairsHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
