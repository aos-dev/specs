// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/fields.toml (608B)
// ../definitions/info_object_meta.toml (1.497kB)
// ../definitions/info_storage_meta.toml (107B)
// ../definitions/operations.toml (4.164kB)
// ../definitions/pairs.toml (1.381kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x44\x0a\x8a\x08\xa1\xb5\xbd\x09\x0b\x89\xcf\x9a\x1d\x04\xe1\xeb\xd1\x9d\x13\xdd\x39\xbe\xd2\x6f\x9e\x77\xf6\x76\xdb\xda\x5b\xc3\xd3\xa8\xab\xbb\xd5\xfa\xfe\x10\xba\xaf\x07\x2a\x84\x01\xeb\xa6\xd9\xb6\xd6\xe7\xd4\x09\x1b\xf6\x67\xec\xd7\xfc\x5d\x00\x39\xc5\xb4\x77\xd6\x7e\x52\x20\x63\x05\xa6\x06\x1b\x7a\xfd\xcd\xdc\x06\x46\x7a\x54\x4a\x86\x1b\x06\xc8\x5e\x1f\x95\x12\xc3\x61\xa6\xdf\xde\x24\x26\x47\xad\x95\x86\x0c\x9f\xda\x4f\xed\xd2\xf4\xb0\xdb\xb9\xb2\x32\x25\xd8\xb5\x5e\x1e\x63\x14\x43\xf1\xec\xe7\xf8\x39\x71\x70\xc6\xc1\x33\xe7\x47\x6d\xa7\xd1\xe6\x72\xd9\x51\x9c\xe8\x45\xa5\xd7\x04\xdd\xfe\xb4\xb2\xad\xa3\xab\x8d\x77\x0a\xcd\x69\xdd\xe2\x80\x9b\x4b\x32\x69\xb6\x10\x50\xae\xe2\x0c\xd0\xa5\x12\xa3\x6f\x1c\x6a\xcd\x3f\x19\xbe\xc2\x98\xdc\xff\x00\x00\x00\xff\xff\xec\xb9\x4c\x6e\x60\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x49, 0x23, 0x77, 0x93, 0x92, 0xdc, 0x60, 0xa, 0xe6, 0x7d, 0x32, 0x65, 0xf9, 0xd6, 0x3e, 0x59, 0x1b, 0xac, 0xbc, 0xc4, 0x1c, 0x8e, 0x22, 0x8b, 0xd5, 0x2, 0x19, 0x56, 0x3a, 0x34, 0x45}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x3b\x8f\xd3\x40\x10\xc7\xfb\x7c\x8a\x51\x9a\xab\x4c\x05\x74\x57\x20\x5d\x83\x44\x74\x48\x80\x28\x4e\x08\x6d\xb2\xe3\x64\x88\xf7\xc1\xec\xf8\x88\xf9\xf4\x68\x76\xe3\xc7\xd9\x16\xdc\x51\x25\xbb\xf3\x9f\xdf\xdf\xf3\xb0\x1f\x4c\x8c\xe8\x6d\x15\xea\x3a\xa1\x7c\xdb\x48\x17\x11\x6e\x61\x4b\x5e\xde\xbe\xde\x6e\x2c\xa6\x03\x53\x14\x0a\x5e\x6f\xdf\x65\xf1\x7d\xd6\x02\x25\x90\x13\x42\xc9\x84\x50\xe7\x53\xc1\x41\xd8\xff\xc0\x83\x6c\x37\x9b\x9e\xef\x5b\xb7\x47\xae\x9c\xb9\x90\x6b\xdd\x13\x9f\x85\xcb\xce\x5c\x7a\x4e\x49\x4b\x40\x7e\x20\x47\x64\xa3\xca\x09\x3c\xd1\x6f\x5c\x45\xaf\x94\x30\x81\x6b\x9a\x92\x23\xf2\xdf\xe8\x12\xc4\x34\xff\xeb\x91\x93\x07\xa7\x35\x97\x43\xf0\x82\x5e\xaa\x06\xfd\x51\x4e\x0b\xf4\x28\x70\xf6\xcd\x18\x4d\xc2\xe4\x8f\xd3\xb0\x46\xd6\xe2\x28\xe6\xb8\x76\x4f\x76\x79\x8b\x97\x18\x58\xe0\x16\x84\x5b\x9c\x57\xf5\xfe\xae\x1f\x79\xeb\xe9\x67\x8b\x70\xc6\x4e\x8b\x4a\x12\xd8\x1c\xf1\x95\x42\x1b\x93\xa4\x72\xc1\x52\x4d\x38\xe1\x0b\x39\xcc\x61\xf2\xe7\x4a\x0c\x1f\xa7\xab\xd6\x9b\xcf\xec\x3e\x90\x3f\x7f\xce\xd2\xde\x36\x75\x4e\x01\x50\x00\x50\x07\x86\x7c\x2e\xcb\x96\xfd\x5d\xb0\x93\x26\xdc\xe7\xc0\x2e\x58\x9c\x97\xb6\x79\x70\x6d\x23\x14\x0d\x4b\xb5\xd6\x88\xf9\x40\x7b\xf1\xd8\x03\x3d\x01\x59\xdd\xfb\xfc\x77\xfa\x10\x03\xfa\x85\x5b\xaf\xa2\x42\x2b\x89\xda\xdd\x01\xf6\x74\x6b\x46\x8f\x17\x2e\xe6\xe8\x91\x97\xd2\x62\x4d\x1e\x2d\xec\xbb\x7e\x8e\xbc\x86\x27\xff\x2c\x7c\x91\xfd\x1b\x1f\xcd\x74\xd3\x9f\xb5\x7d\x1f\x8d\x9c\xb4\xf7\x48\x72\x42\x2e\xdf\x9a\x7d\x0a\x4d\x2b\x3a\x0b\x39\x41\x28\x97\x8c\x8d\x11\x7a\xbc\x5e\x4a\xf8\x65\xd8\xa6\xde\xfc\x26\xc1\xd7\xc0\xe7\x3b\x62\xb0\xa8\xaf\x62\x82\xe0\xa1\x4d\xc8\x37\xfa\x8d\x89\x6d\x19\x60\x42\x7e\xa4\x03\x56\x0e\xc5\x58\x23\x66\x7c\x54\xe3\xbb\x45\xd5\x9f\x8a\x7a\x77\x15\x67\x2f\x4c\x70\x85\x0c\x2d\xe8\x61\x6a\xa0\x8e\x2b\xf4\xd2\x88\xef\xd7\x1f\x67\xe2\xc2\xeb\x4b\x42\x9e\x1b\x29\x6c\xe9\xf2\x27\x00\x00\xff\xff\x8c\x8e\xe3\x56\xd9\x05\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x22, 0x3, 0x91, 0xf9, 0xc2, 0xc4, 0x6e, 0x2b, 0x1e, 0xc6, 0xe, 0xa4, 0x62, 0x72, 0x3f, 0x13, 0xd2, 0x51, 0x84, 0x12, 0x80, 0x34, 0x83, 0xf3, 0x7d, 0xbe, 0xea, 0x96, 0xa5, 0x8d, 0x50}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xce\xc9\x4f\x4e\x2c\xc9\xcc\xcf\x8b\xe5\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x2a\x2e\x29\xca\xcc\x4b\x57\xe2\xe2\x8a\xce\x4b\xcc\x4d\xc5\x14\x4f\xad\x28\xc8\x2f\x2a\x51\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x8a\x2e\xcf\x2f\xca\xd6\x4d\xc9\x2c\x22\xa4\x12\x10\x00\x00\xff\xff\x5f\xe0\xd4\x5a\x6b\x00\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xd1, 0x40, 0x2c, 0xba, 0x2b, 0x76, 0x2b, 0x8d, 0x58, 0xb2, 0xa, 0x71, 0xa7, 0xb1, 0xb5, 0x96, 0x12, 0x28, 0xb9, 0x77, 0x6d, 0x13, 0xc5, 0x3a, 0x98, 0x62, 0x3e, 0x73, 0xf2, 0x73, 0x74}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xbb\x8e\x2b\x37\x0c\xed\xfd\x15\xc4\x34\x69\x16\xdb\xa5\xbc\x45\x1e\x48\x17\x24\x48\xbb\x58\x2c\x68\x89\x63\x33\x57\x23\x09\x92\xc6\x8e\xf3\xf5\x17\x94\xc6\xde\x79\x5b\xbb\xc5\x62\x3c\x22\x79\x0e\x79\x28\x4a\xf3\x86\xde\x93\xd5\x14\xde\x0f\x9a\xa2\x0a\xec\x13\x3b\x0b\xdf\xa0\xe1\x08\xe9\x4c\xc0\x36\x51\x68\x51\x11\xb4\x2e\xc0\x2f\xd9\x1a\x02\x19\x4c\xa4\xc1\x79\x0a\x28\x0e\xf1\xb5\x39\x1c\x1e\xb1\x5e\x9d\x7f\x55\x81\x30\xd1\x47\x79\xb5\x08\x7e\x65\x63\xa0\x98\x00\x5a\x28\x56\xe0\x8e\xff\x92\x4a\xaf\xcd\xc1\x63\xc0\x2e\xc2\x37\x78\x6b\x3c\xa6\x73\xf3\x7e\x08\x14\x7b\x93\xca\x2b\xd7\xbc\xcf\xc0\xae\x81\x9f\x60\x0d\x08\xca\xd9\x44\x36\x41\x72\x4f\x60\x5d\xf3\x02\x4d\x90\x7f\x91\xff\xa7\x19\x01\xbb\x20\xa0\x5c\xd7\x71\xda\xcf\x36\x9b\x00\x5a\x0d\x2d\x5b\x8e\xe7\x11\x03\x1f\x9c\xa2\x18\xe7\x14\x04\xe5\x68\x9c\xfa\x5e\x2b\xcf\xaf\x62\xbc\xa5\xce\x10\x69\x24\x4e\x7e\xb3\xaf\x0d\x58\xba\x42\xb6\xfb\x9a\x3a\x23\xb0\x22\xce\x0e\x56\x36\x98\x48\x53\x10\x77\x15\x79\x81\xe6\xc8\x7a\x55\x98\x71\xa2\xae\x3b\xb2\xdd\xcf\xb4\x98\x14\xc8\x28\x05\xcd\xbd\xb1\xd9\x14\x47\xd6\x71\x0e\x63\x38\xa6\x3d\x0c\x59\xbf\x03\x1c\xc9\x38\x7b\x92\x34\xd3\x99\xe3\x06\xce\x34\xad\x23\x67\x40\xe5\x3c\xd7\x76\xc2\x6f\xce\xdf\xb2\xea\xc5\xa9\xd4\xc2\xdf\xb6\x4a\xe0\x6f\x92\xf3\x5f\x99\x0b\xb8\x00\x5d\x6f\x12\x7b\x43\x03\x3d\x60\x9b\x31\x22\x85\x0b\x2b\x9a\xb2\x8d\x41\x49\x5d\x74\x4c\x99\xa5\xe6\x50\x4b\xf2\x77\x0e\xa4\x92\x0b\x85\x69\x76\x1c\x75\xa7\xe6\x65\x98\x65\x6f\x6a\x0e\x7b\x9d\x79\x78\x6b\x29\xa9\x73\x2d\xa3\x3f\xc4\x38\xb3\x19\xdc\x84\x4f\x7e\x5c\xa7\x92\x97\xa0\x0d\xae\x03\x84\x13\x5f\xc8\x42\x1f\x8c\x88\x2b\xf8\x2b\x8c\x5e\xa0\xe9\x83\xc9\xc4\x3a\x77\xa9\xa5\xf5\xa7\xbb\x50\x66\x95\x7d\x84\x93\x3c\xac\x53\x92\x95\xcf\x06\xfe\x8a\x72\x45\x74\x0c\xa9\x9a\xd6\xdd\x61\x6b\xe4\x8c\x22\x8e\x84\x7d\xbc\xad\x90\xf7\x61\x5b\x39\x77\x66\x88\x65\xf6\x3c\x01\x5c\x99\x3f\x1b\xb0\xcb\x19\xc4\x56\xd3\x7f\xab\x53\x68\x9e\xbb\xeb\xbc\xa1\x8a\xec\x07\xbb\x31\x09\xe8\xbd\x71\xa8\xf3\xd9\xa1\x9c\x8d\x29\xf4\x2a\x7d\x6e\xd8\x15\x8e\xe2\x15\xd7\x68\xe4\x49\xf5\x84\x42\x9e\x56\x39\xc2\x7c\x58\x6d\x96\x65\x5a\x00\x5f\xe6\x95\xc7\x53\x6d\x27\xfd\x8d\x27\x5a\x69\x22\xb8\x9e\x59\x9d\x21\xf6\xde\x3b\xe9\x32\xb4\xda\x75\x45\xaf\xdc\x5f\x19\x61\xd4\x59\xf2\xbb\xa2\xa9\xc4\xec\x6b\xc7\xd9\x03\xa8\x34\xd4\x36\xce\xa2\x97\xa2\x27\xc5\x2d\x2b\x70\x6d\x1b\xe9\x69\x3f\x15\xab\xd5\x86\x0a\x84\xf5\x83\xec\x1f\x31\xce\x35\x1a\xdc\x84\x7c\x7e\x5c\xe7\xed\x83\xbb\xb0\x96\x02\x5d\xf1\xf6\x32\xd4\x5d\xa1\x85\xec\x93\x01\x2a\x0b\x76\x1f\x6f\xc3\xc4\x59\xf2\x95\xa8\x1d\xb2\x4d\xc8\x76\xd4\xe3\x31\xb9\x20\xba\x0c\x7e\x65\x80\xdc\x83\x7c\x6a\x5c\x21\xef\x10\x29\x00\xdb\x98\xd0\xce\xa7\x9e\xc5\x6e\x7e\xa1\x13\x0f\x9a\xb0\x16\x40\x4d\xb2\x11\xd7\x01\xcb\x1a\x60\x25\xd8\x34\xf0\x89\x36\x76\xde\x89\x12\x20\x5c\xd0\xb0\x5e\x06\xce\xba\xae\xce\xf1\xea\x8c\x64\x67\xef\xec\x79\x34\x66\x09\x1b\xa1\x97\x5b\x6e\x19\x00\x9f\xf0\x53\xb0\xb2\xe1\xef\xbe\x75\x2d\x3a\x13\xbc\xe8\x3d\x44\xa8\x2d\xff\xe3\xce\x92\x8f\xe0\x45\x71\xf2\xdf\xe4\x36\x30\x06\xe8\x28\xa1\xc6\x84\xeb\x10\x81\x52\x1f\x2c\xa8\x3e\x04\xd9\xca\x8f\xba\xdc\xbd\x46\x35\xb8\xa3\xc8\xd2\x02\x65\xbb\xe6\x03\x42\x29\xfd\xe7\xa0\x98\xde\x1c\xe6\x29\x78\xe4\x30\xbc\xcd\xaf\xcb\x40\x77\x7a\xdc\x00\xf7\x35\xc7\x0b\x36\x81\x70\xe3\xfb\x44\x56\xb2\x4a\x2d\x1b\xfa\x29\xc2\x90\xe3\x2a\x8d\x17\x68\xae\x2b\x5c\x66\x43\x4c\x8e\x47\xf7\xa1\xd0\x98\x23\xaa\xef\x2b\xfc\xec\x82\x5e\xf5\x1e\x1f\x6e\x37\x57\x4e\x67\xd7\xcb\x59\x78\x03\xf4\x0c\x02\xb6\x5d\xbb\x45\x7d\x9a\xf7\x83\x71\x0a\xcd\x23\x87\x14\x7a\x9a\x51\x8a\x09\x37\xf4\x93\x15\xc0\xac\x97\x4c\x7a\xd9\xbc\x6c\x5b\x07\xae\x5d\xfb\x80\xa8\x21\x33\x45\xce\x67\xc9\xde\x31\x23\x12\x0d\x1f\x2c\x59\xb5\x1d\xb9\xc6\x9f\xb2\x73\xd9\x86\xd3\xea\x23\xdd\x7c\x96\xef\xfe\xbb\xd3\x3f\x57\x69\xf8\x23\x00\x00\xff\xff\xf9\x04\xac\x01\x44\x10\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x8e, 0xfe, 0xe5, 0x5c, 0xb6, 0xb4, 0x14, 0xcc, 0x40, 0x8a, 0x1e, 0xc8, 0x40, 0x2a, 0xb3, 0xcd, 0x66, 0x61, 0xc1, 0xa4, 0x96, 0xa2, 0x9e, 0xad, 0xb8, 0xf6, 0x90, 0x2a, 0xfd, 0x9c, 0xe4}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\x9c\x57\xbb\x17\xe0\xc6\x09\x09\x09\x89\x95\x56\x02\x4e\x08\x45\xae\x3d\xde\x8c\xea\x78\xcc\x78\xd2\x10\x7e\x3d\xb2\x93\xb6\x01\xb6\xdd\x85\x5b\x65\xcf\xfb\xde\xcc\x1b\x37\x5f\x2d\x47\xc5\xa8\xdd\xe0\x5e\x7f\x6b\x74\x4e\x08\x6f\xa1\xcd\x2a\x14\x1f\xdb\xa6\x39\x5d\x97\x9b\x4b\xf7\x14\x47\xa3\xc4\xb1\x53\xde\x63\xfc\xbb\xca\x61\xb6\x42\xa9\x94\xd4\xe3\x84\x96\xfc\x0c\xda\x23\x6c\xe5\x50\xe5\xe0\x59\x20\x50\xd6\x4a\x17\x74\x18\x95\x4c\x78\x31\xb5\xe7\x09\x94\x21\x09\x1f\xc8\x21\x9c\x09\x15\x9c\x51\x0e\x64\x11\xca\x4f\x65\x31\x8f\x58\x6c\x30\xba\xc4\x14\xf5\x7f\x4d\x8e\xfa\x6b\x16\x3f\x12\xc9\x26\x41\x8a\x7a\x91\x3e\xf5\x18\x6b\x3a\xa3\x04\x10\xd4\x51\x22\x3a\xd8\xcd\x20\x68\x6c\x0f\x13\x85\x00\x0b\xaf\x90\x29\x2a\x8a\xc5\xa4\x2c\x67\xfc\x87\xf3\x61\xa9\x29\x79\x76\x03\xbb\x4d\x03\x1f\x29\xeb\x3d\xbb\x8a\x08\x6c\xeb\x06\xfe\x69\x75\x47\xd1\x95\xa1\xa3\x19\x9e\x78\x34\x57\x98\xab\x16\x8a\xb0\x00\xd8\xfb\x8c\xfa\x5b\x6a\x6f\x5e\x5d\x24\x2c\xd5\xb5\x1f\xed\x29\x83\xe0\xf7\x11\xb3\xde\x9c\xb0\x35\xb9\x8c\xb8\x2f\xcb\xab\x25\xab\x64\x87\x9e\x05\x4b\xbe\xae\xd8\x26\x43\xd2\x25\x0e\x64\xe7\xb3\xf7\x83\x21\x79\xa8\x67\xa5\x64\x18\x83\x52\x32\xa2\x1d\xb9\xa7\xfe\x17\xc4\x9d\x35\x21\xec\x8c\xdd\x6f\xb6\xc2\xef\xd6\xb3\x2b\xbb\x37\x0a\xca\x8e\x01\x0f\x28\x33\x28\x0d\x08\xd3\xd2\x1a\x38\xa3\x06\xbc\xf0\x00\x99\x47\xb1\x35\xa2\x4c\x3f\xf1\xa5\x01\x95\xda\xe7\xe2\xe1\x18\xe6\xc5\x2d\xd0\x40\x8a\x0e\xd6\x4f\x40\x75\x2f\x8e\x13\xcb\xbe\x73\x24\xcf\x6e\xb6\x6d\x9b\xed\x72\x8b\x0e\x1c\xc9\x85\x07\x73\xb3\x4e\xcc\x09\x65\x79\x58\xb5\x9f\x5d\x99\x3d\x18\xa5\x03\x9e\xb6\xe6\x48\x6e\x9b\x63\x1b\x70\xff\xe5\xd3\x67\xc8\x6a\x44\x61\x22\xed\xe1\xae\x1a\x2c\xb0\xe3\x68\xab\x5d\xde\xc8\x8e\x74\x87\xde\x8c\xa1\x84\x0e\x77\x40\x1e\x22\x2b\x64\xd4\xdb\xe6\x3d\x0b\xf8\xfc\x27\x02\x6a\x63\xd1\xf1\x94\x21\x05\xa3\x9e\x65\xb8\xa9\xf3\xed\xb0\x37\x07\x62\x01\xca\x30\x46\x87\x9e\x22\xba\xdb\xa6\x6d\xdb\x5f\x01\x00\x00\xff\xff\xe3\x4d\xb1\x49\x65\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xbb, 0xd3, 0xf9, 0x76, 0x45, 0xb9, 0x84, 0x6d, 0xe1, 0x7a, 0x3e, 0xef, 0x80, 0x27, 0x12, 0xbe, 0x28, 0x7d, 0x34, 0x2d, 0x3b, 0xf8, 0x7f, 0xef, 0x67, 0x2, 0x51, 0x7a, 0xe3, 0xb0, 0x6b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
