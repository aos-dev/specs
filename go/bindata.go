// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/features.toml (1.165kB)
// ../definitions/fields.toml (590B)
// ../definitions/info_object_meta.toml (1.756kB)
// ../definitions/info_storage_meta.toml (1.036kB)
// ../definitions/operations.toml (5.014kB)
// ../definitions/pairs.toml (1.414kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _featuresToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x8f\x13\x41\x0c\x85\xfb\xfd\x15\x4f\x69\x00\x29\x17\x41\x49\x41\x8d\xe8\x90\xa0\x3b\xa1\xc8\xd9\x71\x58\x73\x73\xe3\x95\xed\xd9\x88\x7f\x8f\x26\xb9\x90\x55\xb4\xa1\x88\x28\xae\x5b\xad\xc7\xcf\xef\xbd\xef\x31\xab\x3a\x6f\x47\x12\xfb\xd1\x25\xf6\xde\x64\x0c\xd1\x82\x4f\x58\xad\x56\xdd\x65\x8a\x3d\x53\x54\x63\x88\x23\xb1\xcb\xcf\xc2\x09\x7b\x35\x54\x67\x73\x1c\x06\x45\xd2\xf2\x26\x70\xa0\x12\xf0\x30\xe9\x03\xc7\xc5\x7e\xe0\xfe\xc9\x37\x5d\xf7\x65\x8f\x18\xc4\xe7\x4a\x5c\x68\x97\x39\xad\x11\x03\xc3\xd9\x26\xe9\x19\x07\xc9\x19\x45\x03\xc6\x51\xad\x80\x0a\xd8\x4c\xed\x78\xae\xfd\xf7\x3a\x8e\x6a\x27\xf9\x26\xfc\x7d\xae\x7a\x20\x87\x94\x30\x4d\xb5\xe7\x04\x29\xf8\xfc\xed\xeb\xc3\x87\xf7\x1f\x37\x5d\x4b\xd4\x3d\x4e\x62\x51\x29\x6f\xd3\x72\xe4\xd9\xf8\x66\xe6\xb3\xd3\x18\x28\x90\x94\xbd\x05\x1f\x68\x62\x14\x0a\x99\x18\x6d\xf9\xec\x72\x57\x5f\x4a\x09\xc5\x68\x3a\x49\x62\xb8\x3c\xd7\x4c\xc1\x09\x3a\xb2\x51\x3b\xdf\x82\x3c\x60\xa1\xa3\x24\x7e\x2c\x09\x6f\x5b\x49\x89\xf7\x54\x73\x60\xc7\x03\x4d\xa2\xf6\x6e\xa1\xbb\xe3\x8c\x91\xe5\x89\x21\x57\x06\xa9\xfc\x9e\xbb\xdb\x2c\xdf\xbc\xcd\xe5\x9c\xea\x92\xa0\xa9\x9d\xdd\xb4\xba\x7b\x63\x0a\x6e\xfd\xad\x5f\xbe\xd7\xc8\xe2\xb1\x46\xe2\xcc\xd1\x2c\x24\xb8\x42\xcb\xdd\xe8\x74\xf7\x8b\xfb\xd8\x3e\x73\x50\xa2\xa0\x7f\x61\xbc\x7a\x7a\x3f\xd2\x93\x10\xfe\x0a\xbd\x5e\xbc\x37\x9c\xfe\x07\xd4\xd7\xca\x73\xec\x27\xc4\x1e\x14\x77\x03\xfe\x13\x00\x00\xff\xff\x0e\xf1\xc2\x8f\x8d\x04\x00\x00")

func featuresTomlBytes() ([]byte, error) {
	return bindataRead(
		_featuresToml,
		"features.toml",
	)
}

func featuresToml() (*asset, error) {
	bytes, err := featuresTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0xb0, 0xca, 0x7b, 0xa4, 0x63, 0xb5, 0x61, 0x30, 0x41, 0x45, 0x32, 0x96, 0xfd, 0x7d, 0xa1, 0x12, 0xe7, 0xec, 0xc, 0x41, 0x5f, 0x7e, 0xd, 0x36, 0xfb, 0xbc, 0xff, 0xa1, 0x6e, 0xe8, 0x76}}
	return a, nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x04\x05\x45\x84\xd0\xda\xb7\x09\x0b\xc9\x9d\x35\x3b\x08\xc2\xd7\xa3\x73\x82\xee\x1c\x5f\xe9\x37\xe3\x99\xdb\xd9\xf4\xf6\xda\xf1\x38\xea\xea\x66\xb5\xbe\xdd\xa7\xe1\xf3\x8e\x0a\x61\xc2\xba\xeb\x36\xbd\x85\xa2\x3a\x61\x71\x77\xc6\x7e\xc9\xdf\x04\x90\x63\x56\x83\xb3\xf5\x93\x02\x05\x2b\x70\x6a\xb0\x18\xf4\xa7\x70\x8b\xcc\xf4\xa0\x94\x02\x9f\x99\x20\x3b\xbd\x57\x4a\x16\xe3\xcc\x7e\x7d\x35\x31\x39\x68\xab\x34\x15\xf8\xd0\x7f\xe8\x30\xa5\xa7\xed\xd6\x95\x8d\x94\x64\x97\xf6\x7a\x8c\x51\x0c\xd5\xd9\x8f\xf9\xf3\xc4\xc1\x1a\x83\xff\xd4\xe7\xf8\xec\xe6\x7b\xeb\xa5\xa3\xcd\xcd\x75\x73\x35\xdc\x93\x4a\xd0\x09\xba\xfd\x6a\xe3\x06\xc7\xd0\x8a\x77\xda\x62\x50\xd4\x1d\xce\x04\x5d\x5a\xb2\xf4\x85\x7d\x2b\xf2\xbb\xc0\x17\x18\xb3\xf7\x2f\x00\x00\xff\xff\xe7\x39\x44\x84\x4e\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xb4, 0x77, 0x33, 0xec, 0x6f, 0x3d, 0xf5, 0x97, 0x8a, 0xa3, 0xe9, 0xd1, 0xbd, 0x1b, 0x14, 0xb1, 0xb6, 0x53, 0x32, 0x2f, 0xf7, 0xbf, 0xfe, 0xa8, 0x7e, 0xe7, 0x1b, 0xa2, 0x51, 0x17, 0x1c}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4d\x8f\x13\x31\x0c\x86\xef\xf3\x2b\xac\x5e\xf6\x34\x7b\x02\x0e\x48\x7b\x40\xda\x0b\x12\xd5\x22\x01\xe2\xb0\x42\x28\x6d\x3c\xad\xe9\xe4\x03\xc7\x53\x5a\x7e\x3d\x72\xd2\xf9\xd8\x76\x0e\xbb\x74\x4f\x6d\x62\xfb\x7d\x9f\x78\x9c\x3c\x9a\x18\xd1\xdb\x3a\x34\x4d\x42\xf9\x51\xc9\x31\x22\xdc\xc1\x82\xbc\xbc\x7b\xb3\xa8\x2c\xa6\x35\x53\x14\x0a\x5e\x77\x3f\xe4\xe4\x87\x9c\x0b\x94\x40\xb6\x08\xa5\x12\x42\x93\x57\x45\x0e\xc2\xea\x17\xae\x65\x51\x55\xbd\xbe\xef\xdc\x0a\xb9\x76\xe6\x40\xae\x73\x4f\x7c\x2e\x5c\x16\x8b\x6a\x69\x0e\xbd\x54\xa9\x4c\x40\x7e\x10\x8f\xc8\x46\x93\x6f\xab\xea\x1e\x23\xe3\xda\x08\xda\xf7\xb0\x0c\x7b\xb4\x20\x01\x92\x04\x36\x1b\x04\x87\x62\x6e\x2b\xd5\x1b\x38\x12\xfd\xc5\x59\x8a\x99\xd3\x3e\xe5\xd0\x4a\x85\x88\xc8\xaf\x01\x22\x41\x4c\x7b\x05\x4e\xae\x1f\xa0\xae\x01\x5a\x07\x2f\xe8\xa5\x6e\xd1\x6f\x64\x7b\x41\x31\x26\x38\xfb\x76\x8c\x26\x61\xf2\x9b\x69\x58\x23\x73\x71\x14\xb3\x99\xdb\x27\x7b\xb9\x8b\x87\x18\x58\xe0\x0e\x84\x3b\x3c\x6f\xc0\xc7\xfb\x7e\xe6\x3a\x4f\xbf\x3b\x84\x1d\x1e\xf5\xf0\xa7\x43\xdd\xaa\x68\x6b\x92\xd4\x2e\x58\x6a\x08\x27\xfa\x42\x0e\x73\x98\xfc\xae\x16\xc3\x9b\xe9\xac\xf7\xe6\x67\x76\x9f\xc8\xef\xbe\xe6\xd4\xde\x36\x1d\x9d\x0a\x40\x11\x80\x26\x30\xe4\x75\x99\xf6\xec\xef\x82\x9d\x34\xe1\x21\x07\x96\xc1\xe2\xf9\xd1\xaa\x47\xd7\xb5\x42\xd1\xb0\xd4\x73\x8d\x38\x63\x59\xf6\xc9\x63\x0f\x74\x05\x64\xf5\xe2\xe5\xbf\x53\x88\x41\xfa\xe5\xd7\x4e\xf3\x8a\x60\xa9\xd5\x06\x0f\x7a\xff\x37\x60\x23\xce\xcb\xc7\x7d\xc4\xc9\xa3\x6e\xb1\x21\x8f\x16\x56\xc7\xde\x89\xaf\x21\x21\xff\x5c\x92\x92\xf9\x7a\x24\xd1\x4c\xaf\xda\xb3\xc6\xff\xb3\x91\xad\x7e\x7c\x24\xd9\x22\x97\xd7\x76\x95\x42\xdb\x89\x0e\x83\x6c\x21\x94\x4d\xc6\xd6\x08\xed\x4f\x9b\x12\xfe\x18\xb6\xa9\x87\xb8\x49\xf0\x3d\xf0\xee\x9e\x18\x2c\xea\x9b\x91\x20\x78\xe8\x12\xf2\x8d\x3e\xb1\xb1\x2b\x13\x94\x90\xf7\xb4\xc6\x5a\x91\xad\x11\x33\xa2\x1a\x7f\xbc\x68\xd0\x97\x92\xbd\x3c\x25\x67\x2f\x4c\x70\x12\x19\x5a\xd5\x8b\xa9\x81\x3a\xce\xa8\x97\x46\xfc\x3c\xfd\x38\x13\x2f\xbc\xbe\x25\xe4\x73\x23\x15\x9b\x71\xf9\x17\x00\x00\xff\xff\x2a\x78\xf8\x9c\xdc\x06\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x8c, 0x44, 0xf1, 0xa8, 0x1f, 0x48, 0x7d, 0x93, 0x7f, 0xde, 0x8d, 0x7a, 0x68, 0xdf, 0x7, 0xd8, 0x59, 0x1a, 0x89, 0xb4, 0x5b, 0xc, 0xed, 0xb3, 0x55, 0x4e, 0xf5, 0xc6, 0xf7, 0x9a, 0x5a}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xc1\x52\x83\x30\x10\x06\xe0\x7b\x9e\x62\xa7\x77\x3c\x39\xde\xfa\x08\x3e\x41\xc7\x43\x0a\x4b\xdd\x91\x64\x33\x9b\x45\xc1\xa7\x77\x36\xd8\x3a\x22\x76\x68\x39\x12\xf6\xff\x7e\x48\x72\xf0\x29\x61\x6c\xaa\xd8\x87\x23\x4a\x15\xfc\x40\xa1\x0f\x2f\x4e\xc7\x84\xb0\x87\x1d\x45\xdd\xb9\x06\x73\x2d\x94\x94\x38\xda\xda\xb3\x1f\x60\x8a\xc1\x14\xcb\x40\xf1\xbc\xc2\x09\xc5\xdb\xe4\xc3\xce\xb9\xb3\x9e\xe9\x13\x17\xed\xa7\xc7\x6b\xba\xc5\x8c\x4e\x28\x57\x79\x65\xf5\xdd\xbd\x25\x25\x7c\xa9\x5a\xac\xa9\x39\x8d\xb7\xf2\x36\x36\xa9\x2d\x0b\x98\x30\x43\x5b\xd4\xfa\x75\x9b\x5a\x88\x19\xdb\x71\x5d\x1e\x7e\xb0\xac\x42\xf1\x64\xef\x02\xbf\xe3\xb6\x46\x13\x66\x85\xa1\xef\x94\x92\x17\xbd\xf5\x0e\x15\xd9\x82\xdf\xb7\xc8\xb6\xff\x82\xfd\x5b\x72\xcf\xe7\x17\xb0\xfc\x43\x83\x2d\x45\x6c\xe0\x38\x42\x56\x16\x7f\x42\x59\xf4\x29\xae\xf2\xa7\xb1\x15\x7e\xf4\x01\xff\x9e\x08\x0e\x89\x45\x61\x0f\x2a\x3d\x3a\x77\xf8\x60\x79\xab\x1a\x92\x15\x93\x42\xba\xf1\x28\x0b\xf1\x6b\x9b\xbf\x02\x00\x00\xff\xff\x55\x21\x01\x28\x0c\x04\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x5, 0xe4, 0x9a, 0xaa, 0x7e, 0xd9, 0x6d, 0x8e, 0xde, 0xba, 0x12, 0x63, 0x75, 0x3, 0x46, 0x66, 0x22, 0x7f, 0xa5, 0x39, 0xa, 0x59, 0x68, 0x30, 0xc7, 0xd3, 0xb3, 0x59, 0x28, 0x46, 0x82}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\xd4\x43\x2f\xa9\xff\x41\x0f\x6d\xd3\xc5\x2e\xb0\x4d\x8a\x6d\x7b\x2a\x82\x94\xa6\x46\xd6\x6c\x28\x92\x20\x29\xbb\xde\x5f\xbf\x18\x92\xb6\xf5\x69\x2b\x97\xc2\x91\x66\xe6\x3d\xce\x3c\x3e\x52\xfd\x29\xac\x45\x5d\xa1\x7b\x2a\x2a\xf4\xd2\x91\x0d\x64\x34\xbc\x87\x92\x3c\x84\x06\x81\x74\x40\x57\x0b\x89\x50\x1b\x07\x1f\x62\x34\x38\x54\x22\x60\x05\xc6\xa2\x13\x9c\xe0\x37\x65\x51\x9c\x6b\x6d\x8c\xdd\x48\x87\x22\xe0\x73\x7a\x34\x29\x7e\x20\xa5\x20\x85\x80\xd0\x90\xa2\xc0\x6c\xff\x45\x19\x36\x65\x61\x85\x13\xad\x87\xf7\xf0\xb3\xb4\x22\x34\xe5\x53\xe1\xd0\x77\x2a\xa4\x47\xa6\x7c\x1a\x81\x1d\x1c\xdd\xc0\xca\x08\xd2\xe8\x80\x3a\x40\x30\x37\x60\x4d\x79\x07\xa5\xe3\x7f\x3c\xfd\x87\x23\x02\xba\x7c\x2a\x52\xd2\x73\x6b\x2a\x64\x90\x54\x6a\xd2\x04\xd3\xb6\x14\xae\x37\x21\x86\x80\xd0\x15\xd4\xa4\xc9\x37\x3d\x62\xd6\x19\x89\xde\x8f\x99\x5d\x01\xdf\x2a\x23\x5f\xd6\x0e\xf3\x23\x07\x2f\xcd\x32\x57\xea\x8d\x32\x3e\xb9\x3e\x49\xd0\x78\x80\x18\xf7\xba\x59\xf6\xc0\xd2\x28\xaf\x60\xc5\x80\xc1\x20\x13\xe2\xd5\xf9\xdd\x41\xb9\xa5\xea\xf6\x18\x63\xa5\xf1\xf2\x4d\xbb\x25\x7d\x7d\xfd\x29\x24\x11\xf1\xdc\xe6\xa8\xaf\x45\x61\x6d\xa9\xf2\xeb\xc0\x15\xf9\x70\x0d\x99\xdf\x9f\x60\xb7\xa8\x8c\xde\x71\x4b\x42\x43\x7e\x01\x7d\xd8\x82\x2d\x5d\xa1\x21\x8d\xa5\xb5\x5a\xfa\x64\xec\x71\x73\x49\x4a\x7d\xb3\xc7\xa5\x76\xd9\x23\xf7\xe7\x31\x02\x83\x71\xd0\x76\x2a\x90\x55\x98\x49\x03\xe9\x88\xe1\xd1\xed\x49\xe2\x70\x0d\xde\x49\xee\x61\xe5\x43\xd4\x4e\x45\x6e\x2d\xc9\x7b\x72\x28\x83\x71\x89\x69\x4c\xec\xe9\xbb\xa2\x69\x99\xa9\xba\x2b\x72\xaf\xd3\x76\x8d\x41\x36\x6b\x19\xfe\xc1\xc1\x91\x5d\x4e\x63\x7e\xf1\xe7\x3c\xb5\xf8\x0a\x6a\x67\x5a\x10\xb0\xa3\x3d\x6a\xe8\x9c\x62\x09\x30\x9f\x19\x86\x77\x50\x76\x4e\x45\x62\xad\xd9\xaf\xa5\xf5\xc5\xec\x31\xb2\x8a\x39\xcc\x89\x7f\xcc\x53\xe2\x37\x17\xf1\xbf\x66\x92\x49\x04\xc2\x85\xd5\xb4\x4e\x09\x4b\x26\xd6\xab\xd8\x1b\xf4\xf9\xe9\x8a\x71\x9f\x63\x57\x4e\x7b\x84\x98\xdc\xec\x06\xe0\x8c\xa3\x2d\xc0\x4e\x5d\x8d\x74\x85\xbf\x27\xbe\x76\x07\x25\x27\x4f\xf7\x76\x7c\x3a\xd3\x18\xd3\x5a\x85\x2b\x5a\x93\xe3\xfa\x0c\xa1\xb3\xca\x88\x2a\x9e\x60\xd2\x68\x1f\x5c\x27\xc3\x65\x77\xcf\x2c\x80\xb3\x66\xec\x6f\x81\x5b\x74\xc0\x1b\xbc\xa2\x0b\xc6\xb2\x63\x13\x5c\x6c\xe4\xb0\x65\x76\xc6\x07\x4f\x7c\xac\xd8\xad\x15\xe4\x57\xb1\xc3\x19\x2d\xc2\xa1\x21\xd9\x80\xef\xac\x35\x2c\x56\xa1\x2b\xd3\xa6\xb1\x6f\xce\x08\x3d\x81\xf2\xdf\x2b\xb4\xc9\x61\xaf\xf3\xa2\x33\x50\xd2\xe5\x32\xce\x44\x92\xde\xa2\xa4\x9a\x24\x98\xba\xf6\x78\x53\x96\x29\xea\xf6\x79\xcb\x0c\xb8\x03\x0e\xc5\x7a\x93\xfc\x87\x83\x37\xbd\x34\x5e\x51\xfc\x39\xbf\x18\xeb\xcc\x9e\x2a\xee\xda\x41\x1c\xef\xf2\x30\xa4\xd0\x10\x73\x22\xc0\xca\x2e\x9e\xac\x33\xbb\xd9\x94\x2f\x57\x6d\x05\xe9\x20\x48\xf7\xb6\x88\x0f\xc6\xf1\xb0\x72\x5e\x32\xa7\x53\x91\xcb\xe0\x57\xcc\x3c\x57\x72\x40\xda\x07\xa1\xc7\x8e\xaa\x45\x3b\xbe\xac\x72\x06\x0e\x58\x33\x60\x85\xbc\x8f\xe7\x01\xd3\x3b\x10\x2b\xc1\x86\x85\x77\xb8\xb0\x47\x77\x18\x40\xc0\x5e\x28\xaa\xa6\x85\xe3\x5c\x67\xcf\x88\xd5\x2b\x62\x0f\xb8\xe2\x0e\x42\xa9\x29\xac\x87\x8e\xaf\xea\xc9\x2a\x2e\xf0\x43\x30\x4a\x50\x39\x77\x9d\x44\x47\x03\x4f\xf3\xce\x15\xfa\xed\x9f\xca\xcd\x0a\x72\x79\x57\x5d\xb6\x4a\x39\x41\x2d\xcb\x62\x30\xab\xf3\x79\x1b\xef\x02\x27\xd8\xa2\x78\xf3\x06\x3e\x62\x23\xf6\x64\x5c\x51\xbc\x83\xfb\x14\x6e\xb4\x3a\x9e\x52\x8d\xc6\xe8\xdd\xf1\x19\xff\x91\xf7\x42\x01\xf0\x0e\xbe\xa5\x42\x70\xff\xf8\xf0\xf6\x3b\x3c\x7c\xfe\x7c\x1f\xcd\xe0\x64\x64\x98\x0e\x7b\xa5\x52\xf4\x0f\x8f\xee\x1c\x44\x7c\x54\xb4\x6c\x1f\x29\xec\x99\x27\xb0\x3d\x72\xb3\x5a\x8f\xaa\xde\x5c\xe8\x90\x07\xaa\xb0\xb5\x86\xdd\x26\x03\x77\x92\x3f\x7d\xea\xee\xb2\x44\x75\x10\x47\x0f\x0e\x43\xe7\x34\x68\x52\x80\xce\x19\x97\xc2\x73\xa1\x6f\x7f\x3e\xfe\xf8\xfb\x1e\x34\xee\xd1\x9d\x22\x7f\xa5\x73\xe8\xc1\x84\xcf\xbf\xc9\x87\x5f\xfd\xf8\xe1\xb2\x64\x83\xf2\xa5\x67\x07\x80\x9c\xc0\xd7\x53\x6d\xc2\xa6\xe0\x9e\x0f\xa7\xd8\x62\x10\x95\x08\x62\x5e\x76\x19\x5f\x76\xce\x71\x17\xce\xe2\x3b\x65\x8d\x84\xc6\x8f\xcb\xa7\x42\x19\x29\x14\xbc\x87\xe0\x3a\x1c\xc1\x2d\x2b\x3c\x43\x25\xa1\x5f\xbc\x7a\xe1\x0e\xd8\x17\x59\x3a\x5d\x93\xc4\x06\xe7\xc5\x50\xf5\xd9\x61\x17\xbe\x61\xf9\x4d\xec\x5b\x4d\x0a\xdf\x7a\xc8\xab\x9b\xb9\x7b\x1e\x06\xe0\xa3\xd3\x82\xaf\x33\xe6\x59\x0a\xa5\xb6\x42\xbe\xcc\x1c\x1e\x43\x3e\x27\xcf\xbc\x7d\xf0\x2d\xed\xa9\x41\xaf\x17\x36\xd8\xc0\x7d\xb3\x2e\x0e\x14\x1a\xd3\xf1\x25\xe7\x08\xc2\x12\xc8\xb8\x03\xc6\x7b\xed\x53\xca\xcc\x9a\x7c\x78\xfc\x0e\x9e\x3f\xea\x39\xe9\xc3\xd7\xbf\x72\xd2\x38\x4c\x48\x89\x36\xe4\xbb\xd3\x17\x3e\x25\x99\x3c\x88\xd3\xe7\x1c\x30\xf5\x39\x2d\xfa\x20\xc2\x6b\xfc\x64\xdc\xa3\x85\xe5\x73\x59\x10\x51\x49\xbc\x45\xd8\xc4\x49\xd7\x06\x4c\xdd\xfb\xc0\x9d\x2c\xfd\x1b\x67\xdd\x5c\x51\x43\x3a\xf8\xa1\xcf\x7c\x8a\x29\x8d\xd8\x23\x54\x54\xd7\x18\x77\xce\xd9\x49\xf2\x6d\x8a\x0d\xf6\xf2\x76\xd0\x97\x7e\xad\x8c\x9f\x76\x35\xd5\x79\x93\x90\xde\xf5\xb9\xf0\x15\x51\x04\xd9\xcc\x74\x34\xde\x81\xae\x5d\x8f\x58\xe6\xf9\x5b\x3f\x2a\x7f\x5e\xf2\xfd\xff\x44\xba\x0c\xe3\xba\xd0\xff\x0f\x00\x00\xff\xff\x9d\xce\x3a\x7a\x96\x13\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x6a, 0xba, 0xaa, 0x67, 0xe, 0xbd, 0x9, 0xfd, 0x48, 0x62, 0xd3, 0x8a, 0x67, 0xd6, 0x3d, 0xba, 0x1a, 0x97, 0x47, 0xce, 0x81, 0x86, 0x63, 0x5a, 0xbf, 0xdc, 0x65, 0xac, 0x78, 0xf6, 0x87}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\x3d\x57\xdd\x0b\x70\xe3\x84\x84\x84\xc4\x8a\x03\x70\x5a\xa1\xc8\xb1\xc7\x9b\xa1\x8e\x27\x8c\x27\x0d\xe5\xeb\x91\x9d\xa4\x0d\x65\xdb\x5d\xb8\x55\xf6\xbc\xf7\xe6\xbd\xe7\xe6\xc1\x72\x54\x8c\x5a\x77\xee\xf5\xb7\x4a\x8f\x3d\xc2\x5b\xd8\x24\x15\x8a\x8f\x9b\xaa\x3a\x5d\xe7\x9b\x6b\xf7\x14\x07\xa3\xc4\xb1\x56\xde\x63\xfc\x7b\xca\x61\xb2\x42\x7d\x1e\x29\xc7\x3d\x5a\xf2\x47\xd0\x16\x61\x0d\x87\x02\x07\xcf\x02\x81\x92\x16\x76\x41\x87\x51\xc9\x84\x17\xb3\xb6\x3c\x82\x32\xf4\xc2\x07\x72\x08\x67\x86\x42\x9c\x50\x0e\x64\x11\xf2\x4f\x65\x31\x8f\x98\x65\x30\xba\x9e\x29\xea\xff\x8a\x2c\xf8\x5b\x12\x3f\x7b\x92\x55\x82\x14\xf5\x2a\xfb\xd8\x62\x2c\xe9\x0c\x12\x40\x50\x07\x89\xe8\xa0\x39\x82\xa0\xb1\x2d\x8c\x14\x02\x4c\x7c\x99\x99\xa2\xa2\x58\xec\x95\xe5\x4c\xff\xe1\x7c\x98\x67\x72\x9e\x75\xc7\x6e\xb5\xc0\x47\x4a\x7a\xcf\xae\x50\x04\xb6\xa5\x81\x7f\xaa\x6e\x01\xdd\x30\x1d\x4d\xf7\xc4\xa3\xb9\xc1\x39\x63\x21\x03\x33\x01\x37\xdf\xd1\x5e\x6e\xfe\xa9\x1c\x4e\xbb\x5f\x70\x9d\xaf\xa0\x2d\x09\x57\x0f\xec\x7d\x42\xfd\x23\xf8\x37\xaf\xae\x2e\x31\x4d\x17\x4b\xda\x52\x02\xc1\x1f\x03\x26\xdd\x9e\x36\x2b\xe1\x27\xc4\x7d\xee\xbf\x8c\xcc\x90\x06\x3d\x0b\xe6\x8a\x5c\x96\xed\x86\xa0\xd4\x1b\xd1\x9a\xdc\x53\xff\x1b\xe2\xda\x9a\x10\x1a\x63\xf7\xab\xd6\xf8\xdd\x7c\x76\xe3\x6d\x18\x05\x65\xc7\x80\x07\x94\x23\x28\x75\x08\xe3\xa4\x0b\xce\xa8\x01\x2f\xdc\x41\xe2\x41\x6c\x89\x30\xd1\x2f\x7c\xa9\xfb\x3c\xfb\x9c\x77\x8e\xe1\x38\xa9\x05\xea\x48\xd1\xc1\xfc\x89\x28\xea\x59\x71\x64\xd9\xd7\x8e\xe4\xd9\xe6\x37\x9b\x6a\x5d\x7e\xc6\x81\x23\xb9\xf2\xa0\xb6\xb3\x63\xee\x51\xa6\x87\x57\xf6\x69\xb2\xf7\x60\x94\x0e\x78\xaa\xc4\x91\xec\xaa\x65\x0d\xb8\xff\xfa\xf9\x0b\x24\x35\xa2\x30\x92\xb6\x70\x57\x04\x26\xb2\xc5\xda\x2c\x97\x56\xb0\x85\xdd\xa1\x37\x43\xc8\xa1\xc3\x1d\x90\x87\xc8\x0a\x09\x75\x57\xbd\x67\x01\x9f\x2e\x29\xa0\x2c\x16\x1d\x8f\x09\xfa\x60\xd4\xb3\x74\xdb\xe2\xaf\xc1\xd6\x1c\x88\x05\x28\xc1\x10\x1d\x7a\x8a\xe8\x76\x55\x8e\xe1\x77\x00\x00\x00\xff\xff\xf7\x39\x51\x5d\x86\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xe9, 0x6d, 0x71, 0x8c, 0xb2, 0x32, 0x1c, 0x43, 0x4, 0xea, 0xe1, 0xa3, 0xcb, 0xc1, 0xfc, 0x98, 0xdd, 0x1d, 0xe1, 0x8d, 0xbc, 0x7e, 0x53, 0x73, 0x7f, 0x8f, 0x49, 0xa0, 0x66, 0xd2, 0x39}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"features.toml":          featuresToml,
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"features.toml":          {featuresToml, map[string]*bintree{}},
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
