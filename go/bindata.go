// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/infos.hcl (1.312kB)
// ../definitions/operations.hcl (4.487kB)
// ../definitions/pairs.hcl (2.206kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func infosHclBytes() ([]byte, error) {
	return bindataRead(
		_infosHcl,
		"infos.hcl",
	)
}

func infosHcl() (*asset, error) {
	bytes, err := infosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _operationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x0c\x78\x29\x10\x18\x3a\xb5\xbd\xe5\x14\x20\x40\x0f\x41\x83\xf8\xd0\x43\x60\x08\xe3\xe5\x50\x9a\x96\xdc\x25\x76\x87\x52\x9d\xc2\xff\xbd\x98\x25\x29\x72\x25\x72\x2d\x19\x45\x73\x08\x6c\xee\x7c\xbc\x37\xf3\x76\x76\xbc\x61\x2b\xe4\x2b\x34\x04\x85\x71\x2d\x93\x2f\xe0\x9f\x0d\x40\x49\xc1\x78\x6e\x85\x9d\x85\x8f\x50\x70\x00\x39\x10\x4c\xc6\x95\xf3\xf0\xc9\xb5\x2f\xdb\x62\xb3\x01\x70\x6d\xf4\x7e\xe9\x7d\xaf\xbc\x4f\x5c\xd7\xa0\xe7\x80\x16\x7e\x7f\xfe\x93\x8c\x80\xf3\xd0\x74\xb5\x70\x5b\x13\xb8\xfe\x13\xdb\x98\x24\x90\x3f\xb2\xa1\x6d\x11\x43\xb5\xe8\xb1\x09\x10\xff\x7d\x84\xef\x45\xf0\xa6\x78\x80\xa2\x0c\x52\x3c\x6d\x00\x5e\x37\xaf\x73\x0a\x15\x89\x39\xdc\xc3\xe1\xb3\x3a\x4c\x24\xa2\x7f\x8e\x45\x34\x80\xca\xbb\x06\x10\xf6\x7c\x24\x0b\x9d\xaf\x41\x1c\xb4\x28\x87\x15\xcc\x7a\xa4\xa0\x3b\x5f\x2f\x81\x66\x5b\xd2\xdf\xbb\x40\xfb\x86\xf4\xe3\xed\xe0\xa3\x23\x3c\x63\xa0\x12\x06\xf7\x88\x80\x9a\x67\x2a\x61\x56\xb3\x73\xe8\xa7\x91\x68\xcd\x41\x76\x49\xe2\x91\xf5\x08\x7e\x70\x8c\x80\x01\x3c\x85\xae\x96\xd0\xd3\xe1\x81\x45\x1f\xea\xe4\x59\x68\x39\xd6\x52\x05\xa3\x39\xa0\xe6\xd1\x96\x8b\x53\x51\xac\x31\x59\xe8\x3f\xed\xb5\x94\x5e\xff\x8b\x5e\xfa\x43\xe0\x1f\x94\x60\x32\xae\x69\x6b\xba\x07\xd6\xe8\x01\x38\x02\x00\xb4\x25\x34\xe4\xf7\xa4\xa5\x6f\x06\xac\xf0\x99\xeb\x55\x6d\xf6\xd8\x94\x59\x58\x6a\x74\xe3\x8e\xf7\xb4\xf7\x8b\x3b\xd2\x24\x4d\x75\xce\x11\xd0\x73\x2d\xe5\x7f\x77\x99\x5c\x55\x05\x92\xf7\x08\xb3\xf7\x7c\x9f\x32\x7b\x39\xa5\xb9\xff\x27\x3d\xf5\x49\x2f\x04\x95\x94\xc4\x13\xde\x37\x5f\xbe\xa9\xc3\xd4\xc4\xe8\x9f\x63\xd3\x7a\x77\xe4\x52\xf9\x9c\xf0\xe5\x01\x4e\x07\x36\x07\x30\x68\x21\x7a\xc6\x04\x7d\x83\x73\xa3\x26\xbd\xb2\xe3\xd1\xca\xf4\x49\xda\x3b\x9f\x0e\xc3\x41\xc8\xc1\x55\xc3\xb1\xc0\xe1\x7e\x48\x21\x9d\x24\x6c\xf9\xa6\x96\xab\xdd\x74\x4f\xdf\x91\x76\x18\x6b\x63\x5e\x7c\x76\xfe\xa6\xc4\xd1\xf0\xcd\xcc\x53\xf8\x8b\x42\xc7\xab\xb8\x2c\x1e\x6d\x71\x83\x6c\x05\xd9\x0e\x0f\xa3\xea\x39\x88\xf3\xb8\x3f\x5f\xe3\x30\x7b\x6e\x3d\xa1\x64\x07\x42\x6f\x01\x08\x96\x4e\x63\x20\x7d\x33\x82\xa0\x5d\x9d\x08\x16\x1b\x5a\xab\x9a\x38\x9f\x4e\xd9\x92\x74\x62\xe6\x30\xf4\x16\x5a\xb1\x7b\xf3\x8f\x39\xf6\x94\xed\xc8\x9e\xb4\x1f\x47\xac\xb9\xbc\xce\x11\x6f\x60\x7e\x02\xde\xc5\x57\xd5\xfe\xe6\x6d\xc0\xba\xbe\x46\x12\xa0\xb3\x25\x79\x90\x03\x87\x0b\x44\xd7\x69\x79\x51\x3d\x82\xc2\x41\xd8\x30\xda\xdb\xc7\xcf\xe3\xe8\x85\xf5\x24\x9d\x30\x7d\xcc\xbf\x88\x9d\x95\x11\xec\x4f\x01\xce\x6e\xe1\x01\x42\x67\x0e\x80\x01\x1e\xf9\x07\x3d\xc0\x27\xb5\x5c\xa5\x33\x78\x2d\x93\xea\xeb\x74\x3b\xa1\x8b\x0b\x31\x91\xba\x5d\x8b\xe7\x15\x34\x6e\x71\x79\x79\x9c\x87\xc8\x28\x81\x86\x04\x4b\x14\xcc\x25\xf2\x24\x9d\xb7\x60\x3a\xef\x75\x8d\x38\x8b\x61\xf4\x5d\xa9\x94\x1e\xdf\x25\xb7\x21\x4f\xaf\x3a\x08\x2d\x19\xae\xd8\xbc\xb9\x88\x2e\xab\xdd\xa5\xa3\xd8\x13\x96\xf9\xdc\x58\xc6\xf6\x54\x5c\xab\x38\x66\xbc\xd6\xb6\xdf\xd3\x90\xb9\x45\xf6\x61\xbe\x03\xe8\x5b\x9b\xbc\xbe\x1a\x7c\x67\xb0\xae\x9f\xd1\xfc\xb5\xab\x3a\x6b\x56\x40\xdb\x04\xb3\x4a\x2d\x87\x59\xcf\xe3\xa2\x20\x07\x5d\xd8\x75\x74\xb0\xad\x1c\xb8\x6a\xda\x9b\xde\x51\xb8\xeb\x65\xf8\xed\x75\x45\xcb\x35\x2e\x94\xd5\xfa\x42\x39\x96\xce\xdf\x5c\xba\x41\x6c\x3b\x53\x63\x08\xfa\xc1\x38\x2b\x64\x65\x27\x2f\x2d\xcd\x7f\x6f\xca\x5f\xde\x55\xea\xd7\xcd\xa6\x62\xaa\xcb\x7e\x6b\x8c\x44\x35\xb4\xf2\x0b\xe2\xd9\xee\x8b\xcd\xeb\x68\x41\xde\xa7\x16\xe4\xbd\xf3\x33\x83\x7e\x81\x4f\x4c\xd8\xca\xcc\x20\xde\x89\xe4\xfc\xc3\x63\xcf\xf0\x8b\x9e\x4c\x86\xf6\x2a\xca\xaf\x3f\xcf\x8f\x75\xcc\xe7\xc1\xba\x8b\x3c\xfd\x90\x98\x1b\xf4\x45\xce\xe6\x71\xbc\x18\xe5\x37\x21\x8f\x92\x50\x8f\xad\x4c\x8d\xb7\xdb\xed\x57\xe4\xd4\xc8\xcb\x85\xd1\xf7\xa7\x0f\x5f\xd1\x4b\x62\x24\x87\x37\xb8\xb5\x97\xb0\x34\xc4\x02\xa8\x8b\x76\xb1\xdb\x7e\x23\x2c\x69\x6e\xa2\xcb\x4d\x62\xf4\x38\xac\x4d\x33\x93\xcb\x6c\x83\xc9\x42\xc2\x28\xe0\x6c\x45\xf5\x4f\x94\x3c\xb9\xe9\x85\x59\x14\xca\xf9\x09\x4c\x5c\xae\x20\x0e\x43\x7a\x09\x63\xdc\x03\x52\xce\xe3\xbb\x35\x59\xe9\x76\x9d\xc7\x79\xba\x2a\xee\x1f\x3a\x0b\x62\x90\x7f\x03\x00\x00\xff\xff\x5f\x3f\xcb\xa3\x87\x11\x00\x00")

func operationsHclBytes() ([]byte, error) {
	return bindataRead(
		_operationsHcl,
		"operations.hcl",
	)
}

func operationsHcl() (*asset, error) {
	bytes, err := operationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x96, 0x37, 0x45, 0x2a, 0x82, 0xf, 0x9e, 0x3f, 0xdc, 0xe8, 0x22, 0x7b, 0x8f, 0xa3, 0x84, 0x27, 0x21, 0x9f, 0x8f, 0xef, 0x85, 0x75, 0x52, 0xce, 0x2b, 0x84, 0xee, 0x2d, 0xb, 0xaa, 0xa2}}
	return a, nil
}

var _pairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x7c\x4a\x16\x59\xe7\xb2\xdb\x5b\x2e\x2d\x50\x20\x40\x8b\x06\x68\x7a\x6a\x0b\x81\x26\x47\xf6\xc0\x34\x87\x1d\x8e\xec\xb8\x45\xff\x7b\x41\x4a\xb2\x15\x47\x76\x8d\xf8\x60\x48\x9a\xc7\xf7\x9e\xe6\x43\x33\x89\x86\x04\xa6\x96\x83\x62\xd0\x6a\xed\xfe\x9f\xc2\xaf\x09\x80\xee\x22\xc2\x1d\x4c\x93\x0a\x85\xc5\x74\xf2\xfb\x08\x98\xe3\x17\x20\x9f\x74\x00\xea\x7e\x77\xfb\xd8\xec\x5d\x87\x99\x00\x38\x4c\x56\x28\x2a\x71\x18\x20\x80\x02\x18\xef\x41\xf0\x47\x83\xa9\x03\xd6\xa6\xf1\x7a\x4c\xf5\xd6\xd8\xd5\x42\xb8\x09\xee\xea\xfa\xb9\x09\x0a\x8d\xc9\xb4\x95\xf2\x0a\xc3\xa8\x9f\xde\xfb\x0b\x1b\x29\xa2\xa5\x7a\x07\xba\x44\x18\x72\x41\xe1\x82\x9a\x05\x3c\x25\xad\x1c\x09\xf4\xd7\x51\xb0\xa6\xa7\xd9\xc0\x84\xa0\xc3\xa0\x64\xfc\xa8\xf8\x3f\x87\xf8\xec\x41\x78\x43\x0e\xe5\x8c\x95\x25\x6f\x41\x19\x62\x8b\x84\xc3\xe1\xe2\x26\xa1\x6c\xc8\x62\x36\x93\x94\xc5\x2c\x30\x53\x45\x23\x09\xe5\x90\xfe\x81\x60\x8e\x1c\xac\x62\x70\x91\x29\x8c\x57\xad\x0f\xbe\xc2\x65\x7f\xf4\x72\x8f\x07\xb1\x23\x87\x4f\x91\x04\x47\xfd\x65\xdf\xa7\x1d\x6d\x97\x18\x4a\x1d\x1b\xc9\xfd\xa4\x8d\x04\x74\x30\xdf\x81\xa0\xb1\x4b\xd8\x92\xf7\xd0\x91\xbf\x74\x53\x6e\xef\x33\x7f\xef\x63\xa9\x1a\x2b\xeb\x29\x0f\x03\x17\xb1\x34\x5e\xdd\x0c\x6c\x71\xb3\x4f\x1d\x6e\xc4\x24\xc6\x7d\x9f\x75\x6c\x25\x55\xf9\x3e\x13\x40\xcb\x70\x90\xa7\xa0\x28\x16\xa3\xb2\x3c\x1f\xc3\xfb\x41\x60\x8f\x2e\x7d\xf9\x72\x64\x3f\x50\xd2\xc7\xfc\xf4\x00\x64\x5b\xfa\xfb\xf5\x53\xd2\x33\x9c\xac\x74\x2f\x15\xcc\x7a\xbc\x8c\x17\xc9\x74\x74\x50\x58\xf6\x9c\x5c\xd7\x09\xc7\x9b\x97\x82\xbe\xf9\xef\x0c\x69\x7b\xb4\x4b\x3a\xa5\xfe\x8b\x73\xb3\x57\x2a\x0d\x92\x10\x57\xb9\xaf\x0b\xa4\x3b\x32\xc7\x9a\x05\x73\x1b\xb9\x33\x9d\x93\xc5\x7b\x9b\xf9\xbf\x8a\xec\xc9\xee\x9e\x17\xe4\xc1\x90\x3c\xb4\xcf\xf7\xe0\xcc\x5b\x59\xe3\xfd\xdc\xd8\x55\x55\x37\xc1\x8e\xbe\x5f\x0e\x5c\x7d\xfd\x3e\xdf\x29\x5e\x9f\x9d\x02\xa3\xa0\xec\x18\x70\x83\xb2\x03\xa5\x35\xc2\xb6\x75\x0f\xce\xa8\x81\x5a\x78\x0d\x89\x1b\xb1\x83\xc4\x26\xfa\x79\x72\xe6\xce\xa6\x35\x1f\xfc\x5b\x52\x39\xf8\x5d\x6b\xc0\xd3\x9a\x14\x1d\x74\x5b\xa6\x18\xba\x30\xa7\x1d\x63\x65\xbd\x49\xe9\xfc\x66\x6a\x12\x4a\x65\x16\x78\xe2\x33\x77\xd9\x32\x68\x92\xf2\x1a\x32\xd5\xbf\x85\xaa\xcd\xdb\xf1\x98\x6e\x59\x56\x79\x39\xbc\x5e\x28\x33\x40\x5e\x2f\xe3\xf3\x74\xd3\xd5\x91\x23\x4a\x3b\x77\x25\xa5\xf3\x5c\x51\x6f\x94\x36\xb8\x6f\x57\x47\x32\x83\xde\x10\x7c\xfc\xf2\xf9\x11\x92\x1a\x51\xd8\x92\x2e\xe1\xb6\x08\xb4\x64\x7d\x75\x3a\xb9\x34\x38\xd6\xb3\xf7\x5b\x58\x19\x6e\x81\x6a\x08\xac\x90\x50\x67\xf0\x2d\xc0\x7b\x16\xa8\xd3\x31\x0b\x14\x6f\xc1\xf1\x36\x41\xf4\x46\x6b\x96\xf5\x4d\x79\xc5\x39\x2e\xcd\x86\x58\x80\x12\x34\xc1\x61\x4d\x01\x5d\xd9\x9f\x7f\x02\x00\x00\xff\xff\x3d\x24\x1b\x0c\x9e\x08\x00\x00")

func pairsHclBytes() ([]byte, error) {
	return bindataRead(
		_pairsHcl,
		"pairs.hcl",
	)
}

func pairsHcl() (*asset, error) {
	bytes, err := pairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x97, 0x98, 0xb0, 0xe4, 0xa5, 0xb3, 0x99, 0xcc, 0x1e, 0xf6, 0x51, 0x63, 0xfb, 0xee, 0xa9, 0x6c, 0x5d, 0x5f, 0x60, 0xae, 0xb7, 0xf7, 0xf8, 0xf8, 0xff, 0xe0, 0x1, 0x66, 0xfe, 0x29, 0xe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infos.hcl":      infosHcl,
	"operations.hcl": operationsHcl,
	"pairs.hcl":      pairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infos.hcl":      {infosHcl, map[string]*bintree{}},
	"operations.hcl": {operationsHcl, map[string]*bintree{}},
	"pairs.hcl":      {pairsHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
