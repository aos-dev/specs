// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/infos.hcl (1.312kB)
// ../definitions/operations.hcl (4.954kB)
// ../definitions/pairs.hcl (2.165kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func infosHclBytes() ([]byte, error) {
	return bindataRead(
		_infosHcl,
		"infos.hcl",
	)
}

func infosHcl() (*asset, error) {
	bytes, err := infosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _operationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\xdb\x46\x0f\xbe\xfb\x57\x10\xba\x04\x78\x61\xf8\xf4\xb6\xb7\x3d\x05\x08\xd0\x43\xd0\x22\x7b\xe8\xa1\x08\x0c\xee\x88\xb2\xd9\x4a\x33\xc2\x0c\x65\xc7\x29\xf6\xbf\x17\x1c\x49\xd6\x87\x25\xad\xb4\xd8\x1c\x82\x44\xf3\xf0\xeb\x21\xe7\x19\x7a\xc7\x56\xc8\x67\x68\x08\x12\xe3\x4a\x26\x9f\xc0\xbf\x3b\x80\x94\x82\xf1\x5c\x0a\x3b\x0b\x4f\x90\x70\x00\x39\x13\x74\xe0\xcc\x79\xf8\xec\xca\xdb\x21\xd9\xed\x00\x5c\x19\xad\x6f\xb5\xed\x83\xf5\x95\xf3\x1c\xf4\x1c\xd0\xc2\xef\x2f\x7f\x93\x11\x70\x1e\x8a\x2a\x17\x2e\x73\x02\x57\x7f\x62\x1b\x83\x04\xf2\x17\x36\x74\x48\xa2\xab\x12\x3d\x16\x01\xe2\x9f\x27\xf8\x2b\x09\xde\x24\x7b\x48\xd2\x20\xc9\xf7\x1d\xc0\xeb\xee\xb5\x5f\x42\xca\xfe\x98\x73\x90\xf9\x32\xaa\x40\x69\xcc\x3e\x65\x4f\x46\x9c\xbf\xc1\x0b\xea\xb7\x20\xce\xe3\xe9\x1e\x1e\xc4\x81\x7a\x6a\x92\x0b\x50\xd9\x94\x3c\xa0\xda\x75\x45\x2b\xe2\x98\xb2\x5f\x2a\xdc\x93\x54\xde\xd6\xce\x10\x42\x49\x86\x33\x36\x8d\x9f\xa9\x12\xd5\xdf\xf7\x78\xe2\x29\x54\xb9\x84\xfb\x89\xe3\xb9\xa2\x03\x9d\x0a\xb2\x12\x3e\xba\xfa\xd6\xef\xa8\x7c\x00\x2a\x5e\x28\x85\x5e\x5f\x6a\x20\x69\xea\x23\x72\xee\xc9\x2d\xb1\x34\x8c\x76\x61\x7c\x17\x41\x61\x92\xa0\x8c\xc4\x9c\xb7\x4c\xf6\x17\x35\xe8\xba\x1c\xed\x97\x92\x8f\x00\xc8\xbc\x2b\x00\xe1\xc4\x17\xb2\x50\xf9\x5c\x49\x2c\x51\xce\x33\x55\xe8\x91\x8e\x72\xe5\xf3\xa9\xa4\xd9\xa6\xf4\xe3\xd8\xd1\xba\x3a\xf9\x68\xd8\xb6\xb5\x36\x5f\xdb\x31\xb6\x2c\xc7\x41\xe0\xa5\xaa\x15\xad\x37\x7a\x2e\xe0\x4c\xc9\x33\x9d\xa3\x53\xc3\x42\x9d\xca\xd5\xb3\xd0\xfa\x5c\x22\x1c\x50\x23\xaa\x90\x88\xdb\x96\x98\x46\xdf\x43\xe2\xf5\xaf\x68\xa5\xff\x08\xfc\x93\xa6\x3a\x53\xb8\xcb\x96\x7e\x7c\x75\x17\xea\x66\x49\x8d\x97\x0a\xd1\x73\xcd\xfd\xe3\x34\xb1\xf4\x94\xf1\x8f\xb5\xc2\x50\xa3\x37\x6a\x62\x6d\x34\x92\xc5\xfa\xe3\x87\x2a\x63\xe3\x72\x8b\x38\x36\xd5\x6f\xd5\xc7\x55\x34\x3c\x88\xe3\x9d\x87\xf5\xfa\x38\xca\x6f\xb5\x44\xbe\x87\xa1\x69\x75\xf4\x84\xdb\xd4\xf1\x9b\x1a\x74\xcd\x8e\xf6\x4b\x79\x97\xde\x5d\x38\xd5\xdb\x79\xc5\xdb\x1e\xae\x67\x36\x67\x30\x68\x21\x5a\xc6\x00\xf5\x40\x6d\x57\x8d\x19\xed\x1c\xa9\x66\x3c\xb1\x98\xc3\x13\x88\xaf\xa8\x4d\x1c\x5f\x9c\x97\x35\xe2\x12\x81\x3a\xa1\x6f\x6a\x48\x5f\xc1\x8c\x2b\xca\x9c\x84\xd6\x44\x68\xb1\x5d\x10\x40\x9b\x42\x41\xfe\x44\x4a\x50\xd1\x68\x1a\x7c\xe1\x7c\x56\x05\xee\xf1\x47\x5c\xc4\xa1\x9d\xee\xaf\x76\xa1\x40\xb6\x82\x6c\x9b\x7d\x4c\x05\x74\x34\xf0\xa1\xb7\xe5\x79\x42\x59\x14\xb0\x1a\x01\x08\x96\xae\xad\x23\x7d\x94\x82\xa0\x9d\x55\x30\x8b\x05\xcd\x0d\xad\x38\x4f\x03\x62\x53\x52\xaa\x96\x72\xa8\x11\x4a\xe6\xd6\xf8\x6d\x8c\x13\x2d\xf6\xeb\x44\x3a\x0f\x17\xcc\x39\x7d\x8c\x11\x2f\xc9\xb2\x62\x6f\xaa\x57\xef\xfd\x9b\xba\x80\x79\xfe\x98\x49\xab\x4c\x72\xe6\x30\xca\xe8\x31\xec\xa4\x38\x04\x41\xe1\x20\x6c\x18\xed\x7a\x85\x78\x6e\xad\x30\xef\x46\x27\x74\x1f\x97\xaf\x42\x65\xa5\x4d\xf6\x53\x80\xbb\x59\xd8\x43\xa8\xcc\x19\x30\xc0\x33\xff\xa4\x3d\x7c\x56\xe4\x6c\x39\x8d\xd5\x74\x51\x35\x4f\xeb\x0b\x1a\x5d\x88\xae\xa8\xf5\xb3\x78\xff\xe5\x13\xd7\xc4\xe5\xf1\xb8\x2b\x5e\x3b\x02\x05\x09\xa6\x28\xb8\xe2\x35\x35\x95\xf7\xaa\x1f\x6d\x91\x9f\x02\xb4\xd6\x33\x5c\xe9\xf1\x20\x9a\x27\x4c\x97\x23\x61\x1a\x49\xca\x38\xd7\x16\xf5\x7c\xcf\x2d\xb9\xd7\x66\xda\x4b\x64\x1f\xfa\xcf\xa2\xee\x58\x7b\x48\x5c\x96\x05\x92\xb8\x83\x11\xa6\x47\x83\x79\xfe\x82\xe6\x9f\x63\x56\x59\x33\x73\x51\xec\x20\x67\x6d\xf8\x52\xce\x7a\x1e\xf7\x43\x39\xeb\xfb\xad\x17\x98\x6d\xe6\xc0\x65\xdd\xb6\xb5\xfd\xfd\x71\x8f\x3b\xeb\xdb\x5b\xaa\xd2\xd5\xea\x79\x36\xaf\xe7\x2d\x75\x7e\x35\x75\x4d\xcb\x8f\x26\xc7\x10\xf4\x83\x71\x56\xc8\xca\x51\x6e\x25\xf5\xff\x5f\xa4\xbf\xbc\x8b\xea\xd7\xdd\x2e\x63\xca\xd3\xf8\x9b\xb3\x2e\x54\x5d\x6b\x7d\x41\x3c\xdb\x53\xb2\x7b\xbd\x23\x5a\xd1\x9a\x45\x90\x1f\xf9\x20\xef\x9d\xef\x01\xea\x4d\x7c\x00\x61\x2b\x3d\x40\x9c\xdc\xc1\xf9\xff\x9e\x6b\x0e\xbe\xea\x49\x07\xb4\x0f\x5e\x7e\xfd\x7f\xff\x58\xe5\x78\x39\x59\x37\x8a\x53\x5f\xe6\x3e\x80\x27\x11\xbf\x09\x79\x94\x41\x59\xb1\x91\x43\xf0\xe1\x70\xf8\x03\x79\x08\x92\xf3\x1b\x29\xf5\x17\xec\x59\xd0\x88\x62\x76\x87\x6f\x84\x29\xf5\x43\xe9\xe2\x30\x00\x3d\x37\x0b\x4b\x0f\x32\x2e\xae\x81\x4c\x54\x17\xc7\x72\x91\x6d\xfd\xb9\xb2\x9c\x74\xa7\xde\x93\xcd\xbd\x3f\x2f\x03\x93\x87\x14\x1b\x01\x9c\xca\x31\xbe\xb1\xc3\x9a\xdb\x37\xa1\x43\xe9\x72\xb9\x9c\xe7\xf5\x81\xdc\x3f\xf5\x86\x47\x27\xff\x05\x00\x00\xff\xff\xbb\x57\xbf\xb2\x5a\x13\x00\x00")

func operationsHclBytes() ([]byte, error) {
	return bindataRead(
		_operationsHcl,
		"operations.hcl",
	)
}

func operationsHcl() (*asset, error) {
	bytes, err := operationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x77, 0x0, 0xa2, 0xf7, 0x9a, 0xe6, 0x8c, 0xd6, 0xa, 0xd0, 0xa4, 0x0, 0x64, 0xbc, 0x20, 0x93, 0x24, 0xa0, 0x9e, 0x66, 0xc7, 0x99, 0xc4, 0x71, 0x6, 0xaa, 0xf8, 0x4a, 0x11, 0xca, 0xbf}}
	return a, nil
}

var _pairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xc1\x6e\x13\x31\x10\x86\xef\x79\x8a\x51\x4e\x2d\x2a\xe9\x05\xb8\xf5\x02\x12\x52\x0f\x88\x4a\xc0\x09\xd0\xca\xb1\x67\x93\x51\x1c\x8f\x19\xcf\x26\x0d\x88\x77\x47\xf6\xee\x26\xdb\x74\x13\xa2\xf6\x50\x65\x77\x7e\xff\xf3\x79\x3c\xb3\x9e\x44\x43\x02\x53\xcb\x41\x31\x68\xb5\x76\x6f\xa7\xf0\x67\x02\xa0\xbb\x88\x70\x07\xd3\xa4\x42\x61\x31\x9d\xfc\x3d\x12\xe6\xf8\x05\xca\x47\x1d\x88\xba\xbf\xbb\x7d\x6c\xf6\xa1\xd3\x4c\x00\x1c\x26\x2b\x14\x95\x38\x0c\x14\x40\x01\x8c\xf7\x20\xf8\xab\xc1\xd4\x09\x6b\xd3\x78\x3d\xb6\x7a\x6f\xec\x6a\x21\xdc\x04\x77\x75\xfd\x14\x82\x42\x63\xb2\x6d\xa5\xbc\xc2\x30\xca\xd3\xb3\x3f\xc3\x48\x11\x2d\xd5\x3b\xd0\x25\xc2\xd0\x0b\x8a\x17\xd4\x2c\xe0\x29\x69\xe5\x48\xa0\xff\x1d\x05\x6b\x7a\x9c\x0d\x20\x04\x1d\x06\x25\xe3\x47\x93\xbf\x3a\xc4\x67\x0f\xc2\x1b\x72\x28\x67\x50\x96\xbc\x05\x65\x88\xad\x12\x0e\x8b\x0b\x4d\x42\xd9\x90\xc5\x0c\x93\x94\xc5\x2c\x30\x5b\x45\x23\x09\xe5\x50\xfe\x41\xc2\x1c\x39\xa0\x62\x70\x91\x29\x8c\x9f\x5a\x1f\x7c\x01\x65\xbf\xf4\x72\xc6\x43\xb2\x23\xc2\xc7\x48\x82\xa3\x7c\x99\xfb\x34\xd1\x76\x89\xa1\x9c\x63\x23\xb9\x9f\xb4\x91\x80\x0e\xe6\x3b\x10\x34\x76\x09\x5b\xf2\x1e\x3a\xf3\xe7\x34\xe5\xf1\x3e\xfb\xf7\x1c\x4d\x42\xa9\xcc\x02\x4f\xd4\xea\xb2\x8e\x6a\x92\xf2\x1a\xb2\xd5\xeb\x62\x05\xb5\xf0\x1a\xac\x27\x1c\xa6\x5a\xaa\xc6\xaa\x7d\x59\x71\x31\x4a\xe3\x8d\x94\x85\xad\x6e\xf6\xb9\xd3\x8d\x00\x60\xdc\x03\x74\x6e\xe5\x54\xf2\x73\x36\x78\x96\x9e\x82\xa2\x58\x8c\xca\xf2\x74\xe2\xef\x07\x81\xbd\xda\xb3\x2d\x13\xf2\xf2\xaa\xf4\x0e\x27\x7b\xa5\x4f\x15\xcc\x7a\xbc\x11\x2e\x4a\xd3\xd9\x41\x71\xd9\x7b\x72\x5d\x27\x1c\x3f\x52\x0a\xfa\xee\xcd\x19\xd3\x76\x69\x57\x4b\x4a\xfd\x37\xeb\x66\x9f\xa9\xb4\x58\x42\x5c\xe5\xc9\x28\x92\x6e\xc9\x1c\x6b\x16\xcc\x8d\xe8\xce\xf4\x5e\x4e\xde\x63\xe6\xff\x55\x64\x4f\x76\xf7\xf4\x4c\x1e\x0c\xc9\x43\xfb\x7e\x2f\xce\xbe\x95\x35\xde\xcf\x8d\x5d\x55\x75\x13\xec\xe8\xfe\x72\xe0\xea\xfb\xcf\xf9\x4e\xf1\xfa\xec\x1c\x19\x05\x65\xc7\x80\x1b\x94\x1d\x28\xad\x11\xb6\x2d\x3d\x38\xa3\xa6\x6d\xe2\xc4\x8d\xd8\x41\x61\x13\xfd\x3e\x39\xb5\x67\xcb\x9a\x17\xfe\xaf\xa8\x1c\xfc\xae\x05\xf0\xb4\x26\x45\x07\xdd\x3d\x55\x80\x2e\xac\x69\xe7\x58\x59\x6f\x52\x3a\x7f\xb7\x6d\x59\x56\xf9\x9b\xff\xf2\xee\xcb\x0e\x90\x6f\x8d\xf1\x26\xbf\xe9\x8a\xcb\x11\xa5\x1d\x86\xb2\xcf\x79\x2e\xb3\x37\x4a\x1b\xdc\xf7\x90\x23\x99\x41\x0f\x04\x9f\xbe\x7d\xf9\x0a\x49\x8d\x28\x6c\x49\x97\x70\x5b\x12\xb4\x66\x7d\xc9\xba\x74\x69\xb0\xac\x77\xef\x2f\x57\x65\xb8\x05\xaa\x21\xb0\x42\x42\x9d\xc1\x8f\x00\x1f\x59\xa0\x4e\xc7\x2e\x50\xd8\x82\xe3\x6d\x82\xe8\x8d\xd6\x2c\xeb\x9b\xb2\xc5\x39\x2e\xcd\x86\x58\x80\x12\x34\xc1\x61\x4d\x01\x5d\xb9\x16\xff\x05\x00\x00\xff\xff\x1f\xf4\x61\xfc\x75\x08\x00\x00")

func pairsHclBytes() ([]byte, error) {
	return bindataRead(
		_pairsHcl,
		"pairs.hcl",
	)
}

func pairsHcl() (*asset, error) {
	bytes, err := pairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x54, 0x87, 0x2b, 0x53, 0xdc, 0x2a, 0x2d, 0xd5, 0xe8, 0x8f, 0xf2, 0xc5, 0x8, 0x39, 0x8a, 0xd9, 0x57, 0x64, 0xc3, 0x99, 0x1b, 0xf3, 0xdc, 0x6e, 0x23, 0xba, 0x7b, 0xd5, 0x98, 0x5, 0xe7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infos.hcl":      infosHcl,
	"operations.hcl": operationsHcl,
	"pairs.hcl":      pairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infos.hcl":      {infosHcl, map[string]*bintree{}},
	"operations.hcl": {operationsHcl, map[string]*bintree{}},
	"pairs.hcl":      {pairsHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
