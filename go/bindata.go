// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/fields.toml (629B)
// ../definitions/info_object_meta.toml (1.498kB)
// ../definitions/info_storage_meta.toml (107B)
// ../definitions/operations.toml (4.73kB)
// ../definitions/pairs.toml (1.414kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x44\x0a\x8a\x08\xa1\xb5\xbd\x09\x0b\xc9\x9d\x35\x3b\x08\xc2\xd7\xa3\xb3\x13\xdd\x39\xbe\xd2\x6f\x9e\x77\x6e\x77\xdb\xda\x5b\xc3\xd3\xa0\xab\xbb\xd5\xfa\xfe\x10\xbb\xaf\x07\x2a\x84\x11\xeb\xa6\xd9\xb6\xd6\xe7\xd4\x09\x0b\xfb\x33\xf6\x6b\xfe\x2e\x80\x9c\x52\xda\x3b\x6b\x3f\x29\x90\xb1\x02\x53\x83\x85\x5e\x7f\x33\xb7\xc0\x44\x8f\x4a\xc9\x70\xc3\x08\xd9\xeb\xa3\x52\x52\x18\x66\xfa\xed\xcd\xc8\xe4\xa8\xb5\xd2\x98\xe1\x53\xfb\xa9\xdd\x38\x3d\xee\x76\xae\xac\x4c\x89\x76\xad\x97\xc7\x18\xc4\x50\xac\xfd\x9c\x3e\x27\x0e\x96\x18\xbc\x50\x9f\xe3\xb3\xcd\x8f\xda\x4b\x07\x9b\xcb\x65\x73\x71\xb8\x17\x95\x5e\x47\xe8\xf6\xa7\x95\x1d\x1c\x5d\x6d\xbc\x53\x68\x4e\xeb\x16\x67\xdd\x5c\x92\x49\xb3\x85\x80\xf2\x29\xce\x08\x5d\x2a\x29\xfa\xc6\xa1\xd6\xfc\x93\xe1\x2b\x8c\xc9\xfd\x0f\x00\x00\xff\xff\x67\xc3\x95\x1e\x75\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x9b, 0x92, 0x41, 0xd4, 0xc2, 0xe4, 0xf7, 0x35, 0xe2, 0xa, 0xbc, 0xd7, 0x30, 0xc3, 0xc4, 0xc5, 0x2e, 0xcf, 0x26, 0x4, 0x39, 0x6c, 0xb8, 0x83, 0x0, 0x4b, 0xe8, 0x8f, 0xa4, 0xaf, 0x73}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x3b\x8f\xd3\x40\x10\xc7\xfb\x7c\x8a\x51\x9a\xab\x4c\x05\x74\x57\x20\x5d\x83\x44\x74\x48\x80\x28\x4e\x08\x6d\xb2\xe3\x64\x88\xf7\xc1\xec\xf8\x88\xf9\xf4\x68\x76\xe3\xc7\xd9\x16\xdc\x51\x25\xbb\xf3\x9f\xdf\xdf\xf3\xb0\x1f\x4c\x8c\xe8\x6d\x15\xea\x3a\xa1\x7c\xdb\x48\x17\x11\x6e\x61\x4b\x5e\xde\xbe\xde\x6e\x2c\xa6\x03\x53\x14\x0a\x5e\x6f\xdf\x65\xf1\x7d\xd6\x02\x25\x90\x13\x42\xc9\x84\x50\xe7\x53\xc1\x41\xd8\xff\xc0\x83\x6c\x37\x9b\x9e\xef\x5b\xb7\x47\xae\x9c\xb9\x90\x6b\xdd\x13\x9f\x85\xcb\xce\x5c\x7a\x4e\x49\x4b\x40\x7e\x20\x47\x64\xa3\xca\x09\x3c\xd1\x6f\x5c\x45\xaf\x94\x30\x81\x6b\x9a\x92\x23\xf2\xdf\xe8\x12\xc4\x34\xff\xeb\x91\x93\x07\xa7\x35\x97\x43\xf0\x82\x5e\xaa\x06\xfd\x51\x4e\x0b\xf4\x28\x70\xf6\xcd\x18\x4d\xc2\xe4\x8f\xd3\xb0\x46\xd6\xe2\x28\xe6\xb8\x76\x4f\x76\x79\x8b\x97\x18\x58\xe0\x16\x84\x5b\x9c\x57\xf5\xfe\xae\x1f\x79\xeb\xe9\x67\x8b\x70\xc6\x4e\x8b\x4a\x12\xd8\x1c\xf1\x95\x42\x1b\x93\xa4\x72\xc1\x52\x4d\x38\xe1\x0b\x39\xcc\x61\xf2\xe7\x4a\x0c\x1f\xa7\xab\xd6\x9b\xcf\xec\x3e\x90\x3f\x7f\xce\xd2\xde\x36\x75\x4e\x01\x50\x00\x50\x07\x86\x7c\x2e\xcb\x96\xfd\x5d\xb0\x93\x26\xdc\xe7\xc0\x2e\x58\x9c\x97\xb6\x79\x70\x6d\x23\x14\x0d\x4b\xb5\xd6\x88\xf9\x40\x7b\xf1\xd8\x03\x3d\x01\x59\xdd\xfb\xfc\x77\xfa\x10\x03\xfa\x85\x5b\xaf\xa2\x42\x2b\x89\xda\xdd\x01\xf6\x74\x6b\x46\x8f\x17\x2e\xe6\xe8\x91\x97\xd2\x62\x4d\x1e\x2d\xec\xbb\x7e\x8e\xbc\x86\x27\xff\x2c\x7c\x91\xfd\x1b\x1f\xcd\x74\xd3\x9f\xb5\x7d\x1f\x8d\x9c\xb4\xf7\x48\x72\x42\x2e\xdf\x9a\x7d\x0a\x4d\x2b\x3a\x0b\x39\x41\x28\x97\x8c\x8d\x11\x7a\xbc\x5e\x4a\xf8\x65\xd8\xa6\xde\xfc\x26\xc1\xd7\xc0\xe7\x3b\x62\xb0\xa8\xaf\x62\x82\xe0\xa1\x4d\xc8\x37\xfa\x8d\x89\x6d\x19\x60\x42\x7e\xa4\x03\x56\x0e\xc5\x58\x23\x66\x7c\x54\xe3\xbb\x45\xd5\x9f\x8a\x7a\x77\x15\x67\x2f\x4c\x70\x85\x0c\x2d\xe8\x61\x6a\xa0\x8e\x2b\xf4\xd2\x88\xef\xd7\x1f\x67\xe2\xc2\xeb\x4b\x42\x9e\x1b\x29\x6c\xc5\xe5\x4f\x00\x00\x00\xff\xff\x16\x2a\x8f\xd6\xda\x05\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x8a, 0x34, 0x47, 0x6, 0xe0, 0x12, 0x66, 0x5f, 0x2d, 0x2f, 0x5, 0x32, 0x8f, 0x3e, 0x24, 0x3e, 0x2a, 0x5f, 0xf3, 0x1a, 0x82, 0x4, 0xb6, 0x2f, 0x7, 0xe4, 0xa8, 0xcf, 0x34, 0x56, 0xc0}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xce\xc9\x4f\x4e\x2c\xc9\xcc\xcf\x8b\xe5\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x2a\x2e\x29\xca\xcc\x4b\x57\xe2\xe2\x8a\xce\x4b\xcc\x4d\xc5\x14\x4f\xad\x28\xc8\x2f\x2a\x51\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x8a\x2e\xcf\x2f\xca\xd6\x4d\xc9\x2c\x22\xa4\x12\x10\x00\x00\xff\xff\x5f\xe0\xd4\x5a\x6b\x00\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xd1, 0x40, 0x2c, 0xba, 0x2b, 0x76, 0x2b, 0x8d, 0x58, 0xb2, 0xa, 0x71, 0xa7, 0xb1, 0xb5, 0x96, 0x12, 0x28, 0xb9, 0x77, 0x6d, 0x13, 0xc5, 0x3a, 0x98, 0x62, 0x3e, 0x73, 0xf2, 0x73, 0x74}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4d\x73\xdb\x36\x10\xbd\xf3\x57\xec\x30\x87\x5c\x1c\xdd\x7a\xf4\xa1\xa9\xdd\xe9\xa1\xb5\x3b\x4d\x73\xca\x78\x1c\x08\x5c\x4a\x5b\x83\x00\x06\x00\xa5\xa8\xbf\x3e\xb3\x00\x24\xf1\x5b\xf4\xc5\x23\x91\xbb\xfb\x1e\xf6\x2d\x1e\x20\x7f\x13\xd6\xa2\xae\xd0\xbd\x14\x15\x7a\xe9\xc8\x06\x32\x1a\xee\xa1\x24\x0f\x61\x8f\x40\x3a\xa0\xab\x85\x44\xa8\x8d\x83\x5f\x63\x34\x38\x54\x22\x60\x05\xc6\xa2\x13\x9c\xe0\x37\x65\x51\x5c\x6a\x6d\x8c\xdd\x48\x87\x22\xe0\x6b\x7a\x34\x2a\x7e\x24\xa5\x20\x85\x80\xd0\x90\xa2\xc0\x6c\xff\x43\x19\x36\x65\x61\x85\x13\x8d\x87\x7b\xf8\x56\x5a\x11\xf6\xe5\x4b\xe1\xd0\xb7\x2a\xa4\x47\xa6\x7c\x19\x80\x1d\x1d\xdd\xc0\xca\x08\xd2\xe8\x80\x3a\x40\x30\x37\x60\x4d\x79\x07\xa5\xe3\x3f\x9e\xfe\xc7\x01\x01\x5d\xbe\x14\x29\xe9\xb5\x31\x15\x32\x48\x2a\x35\x6a\x82\x69\x1a\x0a\xcb\x4d\x88\x21\x20\x74\x05\x35\x69\xf2\xfb\x0e\x31\xeb\x8c\x44\xef\x87\xcc\x16\xc0\xb7\xca\xc8\xb7\xb5\x62\x7e\xe6\xe0\x39\x2d\x73\xa5\x8e\x94\xf1\xc9\xb2\x92\xa0\xf1\x08\x31\xee\x7d\x5a\x76\xc0\x92\x94\x0b\x58\x31\xa0\x27\x64\x42\x5c\xd4\xef\x0e\xca\x2d\x55\xb7\x65\x8c\x95\x86\xcb\x37\xcd\x96\xf4\xf2\xfa\x53\x48\x22\xe2\xb9\xcd\x71\xbe\x66\x07\x6b\x4b\x95\x5f\x07\xae\xc8\x87\x25\x64\x7e\x7f\x86\xdd\xa2\x32\x7a\xc7\x2d\x09\x7b\xf2\x33\xe8\xfd\x16\x6c\x69\x81\x86\x34\x96\xd6\xce\xd2\x6f\xc6\x9e\x36\xd7\xa4\xd4\x37\x7b\x9a\x6b\x97\x3d\x71\x7f\x9e\x23\x30\x18\x07\x4d\xab\x02\x59\x85\x99\x34\x90\x8e\x18\x1e\xdd\x81\x24\xf6\xd7\xe0\x9d\xe4\x1e\x56\x3e\xc4\xd9\xa9\xc8\xad\x25\xf9\x40\x0e\x65\x30\x2e\x31\x8d\x89\x9d\xf9\xae\x68\x5c\x66\x3c\xdd\x15\xb9\xf7\xcd\x76\x8d\x41\xee\xd7\x32\xfc\x9d\x83\x23\xbb\x9c\xc6\xfc\xe2\xc7\x69\x6a\xf1\x15\xd4\xce\x34\x20\x60\x47\x07\xd4\xd0\x3a\xc5\x23\xc0\x7c\x26\x18\xde\x41\xd9\x3a\x15\x89\x35\xe6\xb0\x96\xd6\x5f\xe6\x80\x91\x55\xcc\x61\x4e\xfc\x61\x9a\x12\xbf\xb9\x0e\xff\x7b\x94\x4c\x43\x20\x5c\x58\x4d\xeb\x9c\x30\x67\x62\x9d\x8a\x1d\xa1\x2f\x4f\x57\xc8\x7d\x89\x5d\xa9\xf6\x00\x31\xb9\xd9\x0d\xc0\x09\x47\x9b\x81\x1d\xbb\x1a\xe9\x0a\x7f\x8c\x7c\xed\x0e\x4a\x4e\x1e\xef\xed\xf8\x74\xa2\x31\xa6\xb1\x0a\x57\xb4\x26\xc7\x75\x19\x42\x6b\x95\x11\x55\x3c\xc1\xa4\xd1\x3e\xb8\x56\x86\xeb\xee\x9e\x58\x00\x67\x4d\xd8\xdf\x0c\xb7\xe8\x80\x37\x78\x45\x17\x8c\x65\x87\x26\x38\xdb\xc8\x7e\xcb\xec\x84\x0f\x9e\xf9\x58\xb1\x5b\x3b\x90\x7f\x8b\x1d\x4e\xcc\x22\x1c\xf7\x24\xf7\xe0\x5b\x6b\x0d\x0f\xab\xd0\x95\x69\x92\xec\x9b\x0b\x42\x67\x40\xf9\xfb\x8a\xd9\xe4\xb0\xf7\x79\xd1\x05\x28\xcd\xe5\x3c\xce\x68\x24\xbd\x45\x49\x35\x49\x30\x75\xed\xf1\xe6\x58\xa6\xa8\xdb\xe7\x2d\x33\xe0\x0e\x38\x14\xeb\x4d\xf2\x1f\x0e\xde\x74\xd2\x78\x45\xf1\xe3\xf4\x62\xac\x33\x07\xaa\xb8\x6b\x47\x71\xba\xcb\x62\x48\xa1\x21\xe6\x44\x80\x95\x5d\x3c\x5b\x67\x76\xb3\x31\x5f\xae\xda\x08\xd2\x41\x90\xee\x6c\x11\x1f\x8c\x63\xb1\x72\x5e\x32\xa7\x73\x91\xab\xf0\x2b\x34\xcf\x95\x1c\x90\xf6\x41\xe8\xa1\xa3\x6a\xd1\x0c\x2f\xab\x9c\x81\x3d\xd6\x0c\x58\x21\xef\xe3\x69\xc0\xf4\x0e\xc4\x4a\xb0\x7e\xe1\x1d\xce\xec\xd1\x1d\x06\x10\x70\x10\x8a\xaa\x71\xe1\xa8\xeb\xe4\x19\xb1\x7a\x45\xec\x01\x0b\xee\x20\x94\x1a\xc3\x7a\x68\xf9\xaa\x9e\xac\xe2\x0a\xdf\x07\xa3\x04\x95\x73\xd7\x8d\xe8\x40\xf0\xa4\x77\xae\xd0\x6d\xff\x78\xdc\xac\x20\x97\x77\xd5\x75\xab\x94\x23\xd4\xb2\x2c\x7a\x5a\x5d\xce\xdb\x78\x17\x38\xc3\x16\xc5\x87\x0f\xf0\x19\xf7\xe2\x40\xc6\x15\xc5\x27\x78\x48\xe1\x46\xab\xd3\x39\xd5\x68\x8c\xde\x1d\x9f\xf1\x97\xbc\x17\x0a\x80\x4f\xf0\x25\x15\x82\x87\xe7\xa7\x8f\xff\xc2\xd3\xe3\xe3\x43\x34\x83\xb3\x91\x61\x3a\xec\x95\x4a\xd1\x5f\x3d\xba\x4b\x10\xf1\x51\xd1\xb0\x7d\xa4\xb0\x57\x56\x60\x7b\xe2\x66\x35\x1e\x55\xbd\xb9\xd2\x21\x0f\x54\x61\x63\x0d\xbb\x4d\x06\x6e\x25\xff\xf4\xa9\xdb\xeb\x12\xd5\x51\x9c\x3c\x38\x0c\xad\xd3\xa0\x49\x01\x3a\x67\x5c\x0a\xcf\x85\xbe\xfc\xf1\xfc\xf5\xcf\x07\xd0\x78\x40\x77\x8e\xfc\x9e\xce\xa1\x27\x13\x1e\x7f\x90\x0f\xdf\xbb\xf1\xfd\x65\xc9\x3d\xca\xb7\x8e\x1d\x00\x72\x02\x5f\x4f\xb5\x09\x9b\x82\x7b\xde\x57\xb1\xc1\x20\x2a\x11\xc4\xf4\xd8\x65\x7c\xd9\x3a\xc7\x5d\xb8\x0c\xdf\x39\x6b\x30\x68\xfc\xb8\x7c\x29\x94\x91\x42\xc1\x3d\x04\xd7\xe2\x00\x6e\x7e\xc2\x33\x54\x1a\xf4\xab\x57\xcf\xdc\x01\xbb\x43\x96\x4e\xd7\x34\x62\xbd\xf3\xa2\x3f\xf5\xd9\x61\x67\x7e\xc3\xf2\x9b\xd8\xb7\x9a\x14\x7e\xf4\x90\x57\x37\x71\xf7\x3c\xf6\xc0\x07\xa7\x05\x5f\x67\xcc\xab\x14\x4a\x6d\x85\x7c\x9b\x38\x3c\xfa\x7c\x56\x7b\x66\x56\xf3\x48\x61\x6f\x5a\xbe\x9a\x9c\x40\x58\x02\x06\x5a\x75\x6e\xce\x6d\xc9\x05\xa9\x7c\x10\x33\x52\xf1\x1b\x10\x51\x1a\x9e\x39\x76\x45\xd2\xb5\x01\x53\xcf\xfd\x62\xbc\x61\x0c\xe3\x53\xbe\x4b\x24\x1e\xe4\x4b\x67\x3c\x6b\x95\x7f\xb0\x46\xf9\xa6\x75\xeb\xfe\x27\xe4\x4a\x24\xdf\x0f\x5e\xc3\xc9\x46\x1d\xcf\xdf\x9b\xea\x97\xdb\x62\xfe\x0c\x00\x00\xff\xff\x20\x41\xb7\x9d\x7a\x12\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1d, 0xe2, 0xab, 0x3b, 0xcb, 0x77, 0x8, 0x7a, 0x89, 0xc6, 0x19, 0x7c, 0x76, 0x7, 0x85, 0xe8, 0x4c, 0x2c, 0x11, 0x88, 0x9c, 0x8c, 0x67, 0xaf, 0xad, 0xb7, 0x4c, 0x56, 0x87, 0xa2, 0x7a}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\x3d\x57\xdd\x0b\x70\xe3\x84\x84\x84\xc4\x8a\x03\x70\x5a\xa1\xc8\xb1\xc7\x9b\xa1\x8e\x27\x8c\x27\x0d\xe5\xeb\x91\x9d\xa4\x0d\x65\xdb\x5d\xb8\x55\xf6\xbc\xf7\xe6\xbd\xe7\xe6\xc1\x72\x54\x8c\x5a\x77\xee\xf5\xb7\x4a\x8f\x3d\xc2\x5b\xd8\x24\x15\x8a\x8f\x9b\xaa\x3a\x5d\xe7\x9b\x6b\xf7\x14\x07\xa3\xc4\xb1\x56\xde\x63\xfc\x7b\xca\x61\xb2\x42\x7d\x1e\x29\xc7\x3d\x5a\xf2\x47\xd0\x16\x61\x0d\x87\x02\x07\xcf\x02\x81\x92\x16\x76\x41\x87\x51\xc9\x84\x17\xb3\xb6\x3c\x82\x32\xf4\xc2\x07\x72\x08\x67\x86\x42\x9c\x50\x0e\x64\x11\xf2\x4f\x65\x31\x8f\x98\x65\x30\xba\x9e\x29\xea\xff\x8a\x2c\xf8\x5b\x12\x3f\x7b\x92\x55\x82\x14\xf5\x2a\xfb\xd8\x62\x2c\xe9\x0c\x12\x40\x50\x07\x89\xe8\xa0\x39\x82\xa0\xb1\x2d\x8c\x14\x02\x4c\x7c\x99\x99\xa2\xa2\x58\xec\x95\xe5\x4c\xff\xe1\x7c\x98\x67\x72\x9e\x75\xc7\x6e\xb5\xc0\x47\x4a\x7a\xcf\xae\x50\x04\xb6\xa5\x81\x7f\xaa\x6e\x01\xdd\x30\x1d\x4d\xf7\xc4\xa3\xb9\xc1\x39\x63\x21\x03\x33\x01\x37\xdf\xd1\x5e\x6e\xfe\xa9\x1c\x4e\xbb\x5f\x70\x9d\xaf\xa0\x2d\x09\x57\x0f\xec\x7d\x42\xfd\x23\xf8\x37\xaf\xae\x2e\x31\x4d\x17\x4b\xda\x52\x02\xc1\x1f\x03\x26\xdd\x9e\x36\x2b\xe1\x27\xc4\x7d\xee\xbf\x8c\xcc\x90\x06\x3d\x0b\xe6\x8a\x5c\x96\xed\x86\xa0\xd4\x1b\xd1\x9a\xdc\x53\xff\x1b\xe2\xda\x9a\x10\x1a\x63\xf7\xab\xd6\xf8\xdd\x7c\x76\xe3\x6d\x18\x05\x65\xc7\x80\x07\x94\x23\x28\x75\x08\xe3\xa4\x0b\xce\xa8\x01\x2f\xdc\x41\xe2\x41\x6c\x89\x30\xd1\x2f\x7c\xa9\xfb\x3c\xfb\x9c\x77\x8e\xe1\x38\xa9\x05\xea\x48\xd1\xc1\xfc\x89\x28\xea\x59\x71\x64\xd9\xd7\x8e\xe4\xd9\xe6\x37\x9b\x6a\x5d\x7e\xc6\x81\x23\xb9\xf2\xa0\xb6\xb3\x63\xee\x51\xa6\x87\x57\xf6\x69\xb2\xf7\x60\x94\x0e\x78\xaa\xc4\x91\xec\xaa\x65\x0d\xb8\xff\xfa\xf9\x0b\x24\x35\xa2\x30\x92\xb6\x70\x57\x04\x26\xb2\xc5\xda\x2c\x97\x56\xb0\x85\xdd\xa1\x37\x43\xc8\xa1\xc3\x1d\x90\x87\xc8\x0a\x09\x75\x57\xbd\x67\x01\x9f\x2e\x29\xa0\x2c\x16\x1d\x8f\x09\xfa\x60\xd4\xb3\x74\xdb\xe2\xaf\xc1\xd6\x1c\x88\x05\x28\xc1\x10\x1d\x7a\x8a\xe8\x76\x55\x8e\xe1\x77\x00\x00\x00\xff\xff\xf7\x39\x51\x5d\x86\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xe9, 0x6d, 0x71, 0x8c, 0xb2, 0x32, 0x1c, 0x43, 0x4, 0xea, 0xe1, 0xa3, 0xcb, 0xc1, 0xfc, 0x98, 0xdd, 0x1d, 0xe1, 0x8d, 0xbc, 0x7e, 0x53, 0x73, 0x7f, 0x8f, 0x49, 0xa0, 0x66, 0xd2, 0x39}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
