// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/infos.hcl (1.312kB)
// ../definitions/operations.hcl (4.441kB)
// ../definitions/pairs.hcl (2.206kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func infosHclBytes() ([]byte, error) {
	return bindataRead(
		_infosHcl,
		"infos.hcl",
	)
}

func infosHcl() (*asset, error) {
	bytes, err := infosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _operationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x8f\xe3\x36\x0c\xbd\xe7\x57\x10\xbe\x14\x28\x06\x39\xb5\xbd\xed\x69\x81\x05\x7a\x58\x74\xb1\x73\xe8\xa1\x58\x04\x8c\x4c\xc7\x6c\x65\xc9\x90\xe4\xa4\xb3\xc5\xfc\xf7\x82\xb2\x1d\x5b\x89\xad\x7c\xa0\xe8\x1e\x16\x33\x16\xa9\xf7\x48\x3e\x52\x9c\x0d\x9b\x40\xae\x42\x45\x50\x28\xdb\x32\xb9\x02\xfe\xd9\x00\x94\xe4\x95\xe3\x36\xb0\x35\xf0\x01\x0a\xf6\x10\x6a\x82\xc9\xb8\xb2\x0e\x3e\xda\xf6\x6d\x5b\x6c\x36\x00\xb6\x8d\xde\x6f\xbd\xef\x95\xf7\x89\xb5\x06\x39\x07\x34\xf0\xdb\xfe\x4f\x52\x01\xac\x83\xa6\xd3\x81\x5b\x4d\x60\xfb\x4f\x6c\x22\x88\x27\x77\x64\x45\xdb\x22\x5e\xd5\xa2\xc3\xc6\x43\xfc\xf7\x01\xfe\x28\xbc\x53\xc5\x0b\x14\xa5\x0f\xc5\xb7\x0d\xc0\xfb\xe6\x7d\x1e\x42\x45\x41\xd5\x8f\xc4\xf0\x49\x1c\xa6\x20\xa2\x7f\x2e\x8a\x68\x00\x95\xb3\x0d\x20\x1c\xf8\x48\x06\x3a\xa7\x21\x58\x68\x31\xd4\x2b\x9c\xe5\x48\x48\x77\x4e\x2f\x91\x66\x53\xd2\xdf\x3b\x4f\x87\x86\xe4\xe3\xfd\xe4\xa3\x23\xec\xd1\x53\x09\x83\x7b\x64\x40\xcd\x9e\x4a\x98\xe5\xec\x7c\xf5\xb7\x31\x50\xcd\x3e\xec\x12\xe0\x31\xea\x91\xfc\xe0\x18\x09\x03\x38\xf2\x9d\x0e\xbe\x0f\x87\x87\x28\xfa\xab\x4e\x8e\x03\x2d\xdf\xb5\x94\xc1\x68\x0e\x28\x38\x52\xf2\x60\x45\x14\x6b\x91\x2c\xd4\x9f\x0e\x92\x4a\x27\xff\x45\x2f\xf9\xc1\xf3\x77\x4a\x38\x29\xdb\xb4\x9a\x1e\xa1\x35\x7a\x00\x8e\x04\x00\x4d\x09\x0d\xb9\x03\x49\xea\x9b\x81\x2b\x7c\x62\xbd\xaa\xcd\x21\x5d\x17\xf5\x6d\xec\xf1\x91\xaa\x7e\xb6\x47\x9a\x14\x29\xce\x39\xde\x72\x2e\x19\xfc\xef\x7a\xc8\x56\x95\xa7\xf0\x8c\x1e\x7b\xcf\xe7\x04\xd9\xab\x28\xc5\xfe\x9f\x64\xd4\x83\x5e\xe8\x28\x49\x89\x23\x7c\x6c\xac\x7c\x15\x87\xa9\x88\xd1\x3f\x17\x4d\xeb\xec\x91\x4b\x89\xe7\x84\x6f\x2f\x70\xaa\x59\xd5\xa0\xd0\x40\xf4\x8c\x00\x7d\x81\x73\x13\x26\xed\xd4\xf1\x68\x65\xe8\x24\xe5\x9d\x0f\x85\xe1\xc0\xe7\xe8\x8a\xe1\x98\x60\xff\x38\x25\x9f\x0e\x10\x36\x7c\x57\xc9\xc5\x6e\x6a\xcf\x27\x60\xcf\xed\xd9\xe3\xe2\xde\xba\xbb\x80\xa3\xe1\x4d\xe4\x95\xee\x1f\x5a\x71\x59\x3c\x52\xe2\x06\xd9\x04\x64\x33\xbc\x87\xa2\x67\x1f\xac\xc3\xc3\xb9\x8d\xfd\xec\x95\x75\x84\x21\x3b\x10\x7a\x0b\x40\x30\x74\x1a\x2f\x92\xa7\xc2\x07\x34\xab\x13\xc1\x60\x43\x6b\x59\x0b\xd6\xa5\xc3\xb5\x24\x19\x94\x39\x0e\xbd\x85\x64\xec\x51\xfc\x11\xe3\x40\xd9\x8a\x1c\x48\xea\x71\x44\xcd\xe5\x35\x46\xec\xc0\xfc\x04\x7c\x28\x5e\x51\xfb\xcd\x6e\x40\xad\xaf\x99\x78\xe8\x4c\x49\x0e\x42\xcd\xfe\x82\xd1\x35\x2c\x2f\xaa\x27\x60\x60\x1f\x58\x31\x9a\xfb\xc7\xcf\xeb\xe8\x85\x7a\x92\x8e\x9f\x3e\xe6\x1f\xc2\xce\x84\x91\xec\x0f\x1e\xce\x6e\xfe\x05\x7c\xa7\x6a\x40\x0f\xaf\xfc\x9d\x5e\xe0\xa3\x58\xae\x86\x33\x78\x2d\x07\xd5\xe7\xe9\xfe\x80\x2e\x1a\x62\x0a\xea\x7e\x2d\x9e\x37\xcf\xb8\xbc\xe5\xe5\x71\x1e\x22\xa3\x04\x1a\x0a\x58\x62\xc0\x1c\x90\xa3\xd0\x39\x03\xaa\x73\x4e\xb6\x87\xb3\x18\x46\xdf\x95\x4c\xc9\xf1\x43\x72\x1b\x70\x7a\xd5\x81\x6f\x49\x71\xc5\xea\xe6\xfe\xb9\xac\x76\x9b\x8e\x62\x47\x58\xe6\xb1\xb1\x8c\xe5\xa9\x58\x8b\x38\x66\x71\xad\x2d\xbd\xa7\x01\xb9\x45\x76\x7e\xbe\x03\xc8\x5b\x9b\xbc\xbe\x72\xf9\x4e\xa1\xd6\x7b\x54\x7f\xed\xaa\xce\xa8\x15\xd2\x26\xe1\x2c\x52\xcb\x71\x96\xf3\xb8\x28\x84\x5a\xf6\x74\x19\x1d\x6c\x2a\x0b\xb6\x9a\xf6\xa6\x27\x12\x77\xbd\x03\xdf\x5e\x57\x24\x5d\xe3\x1e\x59\xad\xef\x91\x63\xea\xdc\xdd\xa9\x1b\xc4\xb6\x53\x1a\xbd\x97\x0f\xca\x9a\x40\x26\xec\xc2\x5b\x4b\xf3\xdf\x9b\xf2\xe7\xa7\x52\xfd\xbe\xd9\x54\x4c\xba\xec\xb7\xc6\x18\xa8\x5c\x2d\xf1\xf9\xe0\xd8\x1c\x8a\xcd\xfb\x68\x41\xce\xa5\x16\xe4\x9c\x75\x33\x83\x7e\x6f\x4f\x4c\xd8\x84\x99\x41\xec\x89\xe4\xfc\xc7\xd7\x3e\xc2\xcf\x72\x32\x19\x9a\xab\x5b\x7e\xf9\x69\x7e\x2c\x63\x3e\x4f\xd6\x5e\xe0\xf4\x43\x62\x6e\xd0\x27\x39\x8b\x63\x79\xf1\x96\x5f\x03\x39\x0c\x49\xe8\xb1\x94\xa9\xf1\x76\xbb\xfd\x82\x9c\x1a\x85\xfa\x06\xed\xf6\x12\xf1\x0b\xba\x25\xbc\x8b\x4a\xb0\xdd\x7e\x25\x2c\x69\x6e\x22\x7b\x4b\x62\xf4\x3a\x6c\x44\x33\x93\x4b\xb4\xc1\x64\x01\x30\x6a\x33\x9b\x2c\xf9\xeb\x23\x1f\xdc\xf4\x78\x2c\x6a\xe0\xfc\xba\x25\x2e\x57\x14\x87\xf9\xbb\xc4\x31\x3e\xf1\x69\xcc\xe3\x93\x34\x59\xc9\xe2\x9c\xe7\x79\xba\x4a\xee\xef\xd2\xe6\xf1\x92\x7f\x03\x00\x00\xff\xff\xae\xd3\x10\x88\x59\x11\x00\x00")

func operationsHclBytes() ([]byte, error) {
	return bindataRead(
		_operationsHcl,
		"operations.hcl",
	)
}

func operationsHcl() (*asset, error) {
	bytes, err := operationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x63, 0xc2, 0xb7, 0x50, 0xad, 0xe9, 0x35, 0x73, 0x3a, 0x70, 0xf9, 0x3d, 0x7e, 0x8a, 0x6a, 0x24, 0x20, 0x1d, 0xa8, 0x51, 0xdb, 0xed, 0x5c, 0xe6, 0xf7, 0xa8, 0x88, 0x40, 0x9, 0x44, 0x6b}}
	return a, nil
}

var _pairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x7c\x4a\x16\x59\xe7\xb2\xdb\x5b\x2e\x2d\x50\x20\x40\x8b\x06\x68\x7a\x6a\x0b\x81\x26\x47\xf6\xc0\x34\x87\x1d\x8e\xec\xb8\x45\xff\x7b\x41\x4a\xb2\x15\x47\x76\x8d\xf8\x60\x48\x9a\xc7\xf7\x9e\xe6\x43\x33\x89\x86\x04\xa6\x96\x83\x62\xd0\x6a\xed\xfe\x9f\xc2\xaf\x09\x80\xee\x22\xc2\x1d\x4c\x93\x0a\x85\xc5\x74\xf2\xfb\x08\x98\xe3\x17\x20\x9f\x74\x00\xea\x7e\x77\xfb\xd8\xec\x5d\x87\x99\x00\x38\x4c\x56\x28\x2a\x71\x18\x20\x80\x02\x18\xef\x41\xf0\x47\x83\xa9\x03\xd6\xa6\xf1\x7a\x4c\xf5\xd6\xd8\xd5\x42\xb8\x09\xee\xea\xfa\xb9\x09\x0a\x8d\xc9\xb4\x95\xf2\x0a\xc3\xa8\x9f\xde\xfb\x0b\x1b\x29\xa2\xa5\x7a\x07\xba\x44\x18\x72\x41\xe1\x82\x9a\x05\x3c\x25\xad\x1c\x09\xf4\xd7\x51\xb0\xa6\xa7\xd9\xc0\x84\xa0\xc3\xa0\x64\xfc\xa8\xf8\x3f\x87\xf8\xec\x41\x78\x43\x0e\xe5\x8c\x95\x25\x6f\x41\x19\x62\x8b\x84\xc3\xe1\xe2\x26\xa1\x6c\xc8\x62\x36\x93\x94\xc5\x2c\x30\x53\x45\x23\x09\xe5\x90\xfe\x81\x60\x8e\x1c\xac\x62\x70\x91\x29\x8c\x57\xad\x0f\xbe\xc2\x65\x7f\xf4\x72\x8f\x07\xb1\x23\x87\x4f\x91\x04\x47\xfd\x65\xdf\xa7\x1d\x6d\x97\x18\x4a\x1d\x1b\xc9\xfd\xa4\x8d\x04\x74\x30\xdf\x81\xa0\xb1\x4b\xd8\x92\xf7\xd0\x91\xbf\x74\x53\x6e\xef\x33\x7f\xef\x63\xa9\x1a\x2b\xeb\x29\x0f\x03\x17\xb1\x34\x5e\xdd\x0c\x6c\x71\xb3\x4f\x1d\x6e\xc4\x24\xc6\x7d\x9f\x75\x6c\x25\x55\xf9\x3e\x13\x40\xcb\x70\x90\xa7\xa0\x28\x16\xa3\xb2\x3c\x1f\xc3\xfb\x41\x60\x8f\x2e\x7d\xf9\x72\x64\x3f\x50\xd2\xc7\xfc\xf4\x00\x64\x5b\xfa\xfb\xf5\x53\xd2\x33\x9c\xac\x74\x2f\x15\xcc\x7a\xbc\x8c\x17\xc9\x74\x74\x50\x58\xf6\x9c\x5c\xd7\x09\xc7\x9b\x97\x82\xbe\xf9\xef\x0c\x69\x7b\xb4\x4b\x3a\xa5\xfe\x8b\x73\xb3\x57\x2a\x0d\x92\x10\x57\xb9\xaf\x0b\xa4\x3b\x32\xc7\x9a\x05\x73\x1b\xb9\x33\x9d\x93\xc5\x7b\x9b\xf9\xbf\x8a\xec\xc9\xee\x9e\x17\xe4\xc1\x90\x3c\xb4\xcf\xf7\xe0\xcc\x5b\x59\xe3\xfd\xdc\xd8\x55\x55\x37\xc1\x8e\xbe\x5f\x0e\x5c\x7d\xfd\x3e\xdf\x29\x5e\x9f\x9d\x02\xa3\xa0\xec\x18\x70\x83\xb2\x03\xa5\x35\xc2\xb6\x75\x0f\xce\xa8\x81\x5a\x78\x0d\x89\x1b\xb1\x83\xc4\x26\xfa\x79\x72\xe6\xce\xa6\x35\x1f\xfc\x5b\x52\x39\xf8\x5d\x6b\xc0\xd3\x9a\x14\x1d\x74\x5b\xa6\x18\xba\x30\xa7\x1d\x63\x65\xbd\x49\xe9\xfc\x66\x6a\x12\x4a\x65\x16\x78\xe2\x33\x77\xd9\x32\x68\x92\xf2\x1a\x32\xd5\xbf\x85\xaa\xcd\xdb\xf1\x98\x6e\x59\x56\x79\x39\xbc\x5e\x28\x33\x40\x5e\x2f\xe3\xf3\x74\xd3\xd5\x91\x23\x4a\x3b\x77\x25\xa5\xf3\x5c\x51\x6f\x94\x36\xb8\x6f\x57\x47\x32\x83\xde\x10\x7c\xfc\xf2\xf9\x11\x92\x1a\x51\xd8\x92\x2e\xe1\xb6\x08\xb4\x64\x7d\x75\x3a\xb9\x34\x38\xd6\xb3\xf7\x5b\x58\x19\x6e\x81\x6a\x08\xac\x90\x50\x67\xf0\x2d\xc0\x7b\x16\xa8\xd3\x31\x0b\x14\x6f\xc1\xf1\x36\x41\xf4\x46\x6b\x96\xf5\x4d\x79\xc5\x39\x2e\xcd\x86\x58\x80\x12\x34\xc1\x61\x4d\x01\x5d\xd9\x9f\x7f\x02\x00\x00\xff\xff\x3d\x24\x1b\x0c\x9e\x08\x00\x00")

func pairsHclBytes() ([]byte, error) {
	return bindataRead(
		_pairsHcl,
		"pairs.hcl",
	)
}

func pairsHcl() (*asset, error) {
	bytes, err := pairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x97, 0x98, 0xb0, 0xe4, 0xa5, 0xb3, 0x99, 0xcc, 0x1e, 0xf6, 0x51, 0x63, 0xfb, 0xee, 0xa9, 0x6c, 0x5d, 0x5f, 0x60, 0xae, 0xb7, 0xf7, 0xf8, 0xf8, 0xff, 0xe0, 0x1, 0x66, 0xfe, 0x29, 0xe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infos.hcl":      infosHcl,
	"operations.hcl": operationsHcl,
	"pairs.hcl":      pairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infos.hcl":      {infosHcl, map[string]*bintree{}},
	"operations.hcl": {operationsHcl, map[string]*bintree{}},
	"pairs.hcl":      {pairsHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
