// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/fields.toml (629B)
// ../definitions/info_object_meta.toml (1.754kB)
// ../definitions/info_storage_meta.toml (1.036kB)
// ../definitions/operations.toml (5.047kB)
// ../definitions/pairs.toml (1.414kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x44\x0a\x8a\x08\xa1\xb5\xbd\x09\x0b\xc9\x9d\x35\x3b\x08\xc2\xd7\xa3\xb3\x13\xdd\x39\xbe\xd2\x6f\x9e\x77\x6e\x77\xdb\xda\x5b\xc3\xd3\xa0\xab\xbb\xd5\xfa\xfe\x10\xbb\xaf\x07\x2a\x84\x11\xeb\xa6\xd9\xb6\xd6\xe7\xd4\x09\x0b\xfb\x33\xf6\x6b\xfe\x2e\x80\x9c\x52\xda\x3b\x6b\x3f\x29\x90\xb1\x02\x53\x83\x85\x5e\x7f\x33\xb7\xc0\x44\x8f\x4a\xc9\x70\xc3\x08\xd9\xeb\xa3\x52\x52\x18\x66\xfa\xed\xcd\xc8\xe4\xa8\xb5\xd2\x98\xe1\x53\xfb\xa9\xdd\x38\x3d\xee\x76\xae\xac\x4c\x89\x76\xad\x97\xc7\x18\xc4\x50\xac\xfd\x9c\x3e\x27\x0e\x96\x18\xbc\x50\x9f\xe3\xb3\xcd\x8f\xda\x4b\x07\x9b\xcb\x65\x73\x71\xb8\x17\x95\x5e\x47\xe8\xf6\xa7\x95\x1d\x1c\x5d\x6d\xbc\x53\x68\x4e\xeb\x16\x67\xdd\x5c\x92\x49\xb3\x85\x80\xf2\x29\xce\x08\x5d\x2a\x29\xfa\xc6\xa1\xd6\xfc\x93\xe1\x2b\x8c\xc9\xfd\x0f\x00\x00\xff\xff\x67\xc3\x95\x1e\x75\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x9b, 0x92, 0x41, 0xd4, 0xc2, 0xe4, 0xf7, 0x35, 0xe2, 0xa, 0xbc, 0xd7, 0x30, 0xc3, 0xc4, 0xc5, 0x2e, 0xcf, 0x26, 0x4, 0x39, 0x6c, 0xb8, 0x83, 0x0, 0x4b, 0xe8, 0x8f, 0xa4, 0xaf, 0x73}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4d\x8f\xd3\x30\x10\x86\xef\xf9\x15\xa3\x5e\xf6\x94\x9e\x80\x03\xd2\x1e\x90\x7a\x41\xa2\x5a\x24\x40\x1c\x56\x08\xb9\xf5\xa4\x1d\x1a\x7f\x60\x4f\x4a\xcb\xaf\x47\x63\xe7\x6b\x93\x2c\x02\x69\x7b\x6a\x3d\x33\x79\xdf\xc7\xe3\xb1\x1f\x95\xf7\x68\x75\xe9\xaa\x2a\x22\x7f\x2b\xf8\xea\x11\xee\x61\x45\x96\xdf\xbc\x5a\x15\x1a\xe3\x3e\x90\x67\x72\x56\xa2\xef\x52\xf1\x43\xaa\x05\x8a\xc0\x47\x84\xfc\x25\xb8\x2a\xad\xb2\x1c\xb8\xdd\x0f\xdc\xf3\xaa\x28\x3a\x7d\xdb\x98\x1d\x86\xd2\xa8\x0b\x99\xc6\x3c\xf1\x99\xb9\xac\x56\xc5\x06\x7d\xc0\xbd\x62\xd4\x6f\x61\xeb\xce\xa8\x81\x1d\x44\x76\x41\x1d\x10\x0c\xb2\x5a\x17\xc5\x56\x5d\x3a\xbb\xac\x1e\x81\x6c\x0f\xe0\x31\x28\x11\x5c\x17\xa2\xd7\x73\x44\xfa\x8d\x8b\x14\x0b\xbb\xfd\x7f\x0e\x51\x17\x08\x8f\x61\x06\xf2\x94\x83\x1d\xab\xfa\xc6\x34\xc9\xa3\x67\x7a\xae\x31\x7b\x67\x19\x2d\x97\x35\xda\x03\x1f\x67\x14\x43\x81\xd1\xaf\x87\x6c\xe4\x40\xf6\x30\x4e\x4b\x66\x29\x8f\xac\x0e\x4b\x71\xd2\xf3\x28\x5e\xbc\x0b\x0c\xf7\xc0\xa1\xc1\x69\x03\xde\x6f\xba\x91\x6b\x2c\xfd\x6c\x10\x4e\x78\x95\x8d\xb5\x0d\x58\x8b\x68\xad\x22\x97\xc6\x69\xaa\x08\x47\xfa\x4c\x06\x53\x9a\xec\xa9\x64\x15\x0e\xe3\x51\xef\xcc\x27\x76\x1f\xc8\x9e\x3e\xa7\xd2\xce\x36\x5e\x8d\x08\x40\x16\x80\xca\x05\x48\xeb\x3c\xec\xc9\xdf\x38\x3d\x6a\xc2\x43\x4a\x6c\x9d\xc6\xe9\xd6\x8a\x47\xd3\xd4\x4c\x5e\x05\x2e\x97\x1a\x31\x61\xd9\x76\xc5\x43\x0f\x64\x05\xa4\xe5\xde\xa5\xbf\x63\x88\x5e\xfa\x36\xb7\x4e\xb4\xb2\x69\xd6\x97\x43\xe8\x3d\xe7\x03\x36\xe0\xdc\x66\xdc\x07\x9c\x34\xea\x1a\x2b\xb2\xa8\x61\x77\xed\x6a\xc3\x73\x24\x64\x5f\x92\x24\xab\xfd\x9d\xa4\x05\xf1\x6a\x7c\xd3\xfe\x69\xfa\x3f\x2a\x3e\xca\xd9\x23\xf1\x11\x43\x7e\x6b\x77\xd1\xd5\x0d\xcb\x2c\xf0\x11\x5c\x0e\x06\xac\x15\xd3\xb9\x0d\xb2\xfb\xa5\x82\x8e\x9d\xff\x5d\x84\xaf\x2e\x9c\x36\x14\x40\xa3\x3c\x07\x11\x9c\x85\x26\x62\xb8\x93\xc7\xd3\x37\x79\x80\x22\x86\x33\xed\xb1\x94\x9d\x69\xc5\x6a\x40\x55\xf6\x3a\xeb\xcf\xa7\x5c\xbd\x6d\x8b\x93\x17\x46\x68\x45\xfa\x2e\x74\x62\x62\x20\x8e\x0b\xea\xb9\x11\xdf\xdb\x1f\xa3\xfc\xcc\xeb\x4b\xc4\x30\x35\x12\xb1\x05\x97\x3f\x01\x00\x00\xff\xff\x0c\x1d\x28\x81\xda\x06\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xcc, 0x22, 0xc8, 0x5f, 0xcf, 0x52, 0xea, 0xcb, 0x73, 0x0, 0xd, 0x6, 0x31, 0x76, 0xf0, 0x78, 0xe4, 0x17, 0xe4, 0x24, 0x51, 0xc6, 0x88, 0x61, 0x5d, 0xa0, 0xb4, 0xb3, 0xbe, 0xd4, 0x63}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xc1\x52\x83\x30\x10\x06\xe0\x7b\x9e\x62\xa7\x77\x3c\x39\xde\xfa\x08\x3e\x41\xc7\x43\x0a\x4b\xdd\x91\x64\x33\x9b\x45\xc1\xa7\x77\x36\xd8\x3a\x22\x76\x68\x39\x12\xf6\xff\x7e\x48\x72\xf0\x29\x61\x6c\xaa\xd8\x87\x23\x4a\x15\xfc\x40\xa1\x0f\x2f\x4e\xc7\x84\xb0\x87\x1d\x45\xdd\xb9\x06\x73\x2d\x94\x94\x38\xda\xda\xb3\x1f\x60\x8a\xc1\x14\xcb\x40\xf1\xbc\xc2\x09\xc5\xdb\xe4\xc3\xce\xb9\xb3\x9e\xe9\x13\x17\xed\xa7\xc7\x6b\xba\xc5\x8c\x4e\x28\x57\x79\x65\xf5\xdd\xbd\x25\x25\x7c\xa9\x5a\xac\xa9\x39\x8d\xb7\xf2\x36\x36\xa9\x2d\x0b\x98\x30\x43\x5b\xd4\xfa\x75\x9b\x5a\x88\x19\xdb\x71\x5d\x1e\x7e\xb0\xac\x42\xf1\x64\xef\x02\xbf\xe3\xb6\x46\x13\x66\x85\xa1\xef\x94\x92\x17\xbd\xf5\x0e\x15\xd9\x82\xdf\xb7\xc8\xb6\xff\x82\xfd\x5b\x72\xcf\xe7\x17\xb0\xfc\x43\x83\x2d\x45\x6c\xe0\x38\x42\x56\x16\x7f\x42\x59\xf4\x29\xae\xf2\xa7\xb1\x15\x7e\xf4\x01\xff\x9e\x08\x0e\x89\x45\x61\x0f\x2a\x3d\x3a\x77\xf8\x60\x79\xab\x1a\x92\x15\x93\x42\xba\xf1\x28\x0b\xf1\x6b\x9b\xbf\x02\x00\x00\xff\xff\x55\x21\x01\x28\x0c\x04\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x5, 0xe4, 0x9a, 0xaa, 0x7e, 0xd9, 0x6d, 0x8e, 0xde, 0xba, 0x12, 0x63, 0x75, 0x3, 0x46, 0x66, 0x22, 0x7f, 0xa5, 0x39, 0xa, 0x59, 0x68, 0x30, 0xc7, 0xd3, 0xb3, 0x59, 0x28, 0x46, 0x82}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4f\x73\xdb\xb8\x0f\xbd\xeb\x53\x60\xd4\x43\x2f\xa9\x6f\xbf\x63\x0f\x6d\xd3\xdf\xec\xce\x6c\x93\xce\xb6\x3d\x75\x32\x29\x4d\x41\x36\x36\x14\xc9\x21\x29\xbb\xde\x4f\xbf\x03\x92\xb2\xf5\xd7\x56\x2e\x19\x8b\x02\xf0\x40\xe0\xe1\x91\xca\x4f\x61\x2d\xea\x0a\xdd\x53\x51\xa1\x97\x8e\x6c\x20\xa3\xe1\x3d\x94\xe4\x21\xec\x11\x48\x07\x74\xb5\x90\x08\xb5\x71\xf0\x21\x5a\x83\x43\x25\x02\x56\x60\x2c\x3a\xc1\x0e\x7e\x53\x16\xc5\x39\xd6\xc6\xd8\x8d\x74\x28\x02\x3e\xa7\xa5\x49\xf0\x23\x29\x05\xc9\x04\x84\x86\x64\x05\x66\xfb\x0f\xca\xb0\x29\x0b\x2b\x9c\x68\x3c\xbc\x87\x9f\xa5\x15\x61\x5f\x3e\x15\x0e\x7d\xab\x42\x5a\x32\xe5\xd3\x08\xec\xe8\xe8\x06\x56\x46\x90\x46\x07\xd4\x01\x82\xb9\x01\x6b\xca\x3b\x28\x1d\xff\xf1\xf4\x2f\x8e\x12\xd0\xe5\x53\x91\x9c\x9e\x1b\x53\x21\x83\xa4\x50\x93\x22\x98\xa6\xa1\x70\xbd\x08\xd1\x04\x84\xae\xa0\x26\x4d\x7e\xdf\x4b\xcc\x3a\x23\xd1\xfb\x71\x66\x57\xc0\xb7\xca\xc8\x97\xb5\xcd\xfc\xc8\xc6\x4b\xbd\xcc\x91\x7a\xad\x8c\x2b\xd7\x3b\x09\x1a\x8f\x10\xed\x5e\xd7\xcb\x1e\x58\x6a\xe5\x15\xac\x68\x30\x68\x64\x42\xbc\xda\xbf\x3b\x28\xb7\x54\xdd\x6e\x63\x8c\x34\xde\xbe\x69\xb6\xa4\xaf\xef\x3f\x99\xa4\x44\x3c\x97\x39\xf2\x6b\x91\x58\x5b\xaa\xfc\x3a\x70\x45\x3e\x5c\x43\xe6\xf7\x1d\xec\x16\x95\xd1\x3b\x2e\x49\xd8\x93\x5f\x40\x1f\x96\x60\x4b\x57\xd2\x90\xc6\xd2\x5a\x2e\x7d\x32\xf6\xb4\xb9\x38\xa5\xba\xd9\xd3\x52\xb9\xec\x89\xeb\xf3\x18\x81\xc1\x38\x68\x5a\x15\xc8\x2a\xcc\x49\x03\xe9\x88\xe1\xd1\x1d\x48\xe2\x70\x0f\xde\x49\xae\x61\xe5\x43\xe4\x4e\x45\x6e\x6d\x92\xf7\xe4\x50\x06\xe3\x52\xa6\xd1\xb1\xc7\xef\x8a\xa6\x61\xa6\xec\xae\xc8\xbd\x8e\xdb\x35\x06\xb9\x5f\x9b\xe1\xff\xd9\x38\x66\x97\xdd\x38\xbf\xf8\x73\x3e\xb5\xf8\x0a\x6a\x67\x1a\x10\xb0\xa3\x03\x6a\x68\x9d\x62\x0a\x70\x3e\x33\x19\xde\x41\xd9\x3a\x15\x13\x6b\xcc\x61\x6d\x5a\x5f\xcc\x01\x63\x56\xd1\x87\x73\xe2\x1f\xf3\x29\xf1\x9b\x0b\xf9\x5f\xd3\xc9\x44\x02\xe1\xc2\xea\xb4\x3a\x87\x25\x11\xeb\x45\xec\x35\xfa\xbc\xba\xa2\xdd\x67\xdb\x95\xdd\x1e\x21\x26\x35\xbb\x01\x38\xa3\x68\x0b\xb0\x53\x55\x23\x5d\xe1\xef\x89\xae\xdd\x41\xc9\xce\xd3\xd9\x8e\xab\x33\x85\x31\x8d\x55\xb8\xa2\x34\xd9\xae\x9f\x21\xb4\x56\x19\x51\xc5\x13\x4c\x1a\xed\x83\x6b\x65\xb8\x4c\xf7\xcc\x06\xd8\x6b\x46\xfe\x16\x72\x8b\x0a\x78\x23\xaf\xa8\x82\x31\xec\x58\x04\x17\x0b\x39\x2c\x99\x9d\xd1\xc1\x2e\x1f\x2b\x76\x6b\x09\xf9\x55\xec\x70\x86\x8b\x70\xdc\x93\xdc\x83\x6f\xad\x35\x4c\x56\xa1\x2b\xd3\xa4\xb6\x6f\xce\x08\x3d\x82\xf2\xf3\x0a\x6e\xb2\xd9\xeb\xb4\xe8\x0c\x94\x78\xb9\x8c\x33\xa1\xa4\xb7\x28\xa9\x26\x09\xa6\xae\x3d\xde\xa4\x65\xb2\xba\x7d\xde\x72\x06\x5c\x01\x87\x62\xbd\x48\xfe\xcd\xc6\x9b\x9e\x1b\xef\x28\xfe\x9c\xdf\x8c\x75\xe6\x40\x15\x57\xed\x28\x4e\x77\xb9\x19\x52\x68\x88\x3e\x11\x60\x65\x15\x3b\xe9\xcc\x6a\x36\xcd\x97\xa3\x36\x82\x74\x10\xa4\x7b\x23\xe2\x83\x71\xdc\xac\xec\x97\xc4\xa9\x0b\x72\x69\xfc\x8a\x9e\xe7\x48\x0e\x48\xfb\x20\xf4\x58\x51\xb5\x68\xc6\x97\x55\xf6\xc0\x41\xd6\x0c\x58\x21\xcf\xf1\x3c\x60\x7a\x07\x62\x25\xd8\x30\xf0\x0e\x17\x66\x74\x87\x01\x04\x1c\x84\xa2\x6a\x1a\x38\xf6\x75\xf6\x8c\x58\xbd\x23\xd6\x80\x2b\xea\x20\x94\x9a\xc2\x7a\x68\xf9\xaa\x9e\xa4\xe2\x02\x3f\x04\xa3\x04\x95\x7d\xd7\x51\x74\xd4\xf0\xd4\xef\x1c\xa1\x5f\xfe\x29\xdd\xac\x20\x97\xa7\xea\x32\x2a\xe5\x04\xb5\x2c\x8b\x41\xaf\xce\xe7\x6d\xbc\x0b\x74\xb0\x45\xf1\xe6\x0d\x7c\xc4\xbd\x38\x90\x71\x45\xf1\x0e\xee\x93\xb9\xd1\xea\xd4\xb9\x1a\x8d\x51\xbb\xe3\x1a\x3f\xe4\x59\x28\x00\xde\xc1\xb7\x14\x08\xee\x1f\x1f\xde\x7e\x87\x87\xcf\x9f\xef\xa3\x18\x74\x42\x86\xe9\xb0\x57\x2a\x59\xff\xf0\xe8\xce\x46\xc4\x47\x45\xc3\xf2\x91\xcc\x9e\xb9\x03\xdb\x13\x17\xab\xf1\xa8\xea\xcd\x25\x1d\xf2\x40\x15\x36\xd6\xb0\xda\x64\xe0\x56\xf2\xa7\x4f\xdd\x5e\xb6\xa8\x8e\xe2\xe4\xc1\x61\x68\x9d\x06\x4d\x0a\xd0\x39\xe3\x92\x79\x0e\xf4\xed\x8f\xc7\x1f\x7f\xdd\x83\xc6\x03\xba\xce\xf2\x57\x3a\x87\x1e\x4c\xf8\xfc\x9b\x7c\xf8\xd5\xb7\x1f\x6e\x4b\xee\x51\xbe\xf4\xe4\x00\x90\x1d\xf8\x7a\xaa\x4d\xd8\x14\x5c\xf3\x61\x17\x1b\x0c\xa2\x12\x41\xcc\xd3\x2e\xe3\xcb\xd6\x39\xae\xc2\x99\x7c\x9d\xd7\x88\x68\xbc\x5c\x3e\x15\xca\x48\xa1\xe0\x3d\x04\xd7\xe2\x08\x6e\x99\xe1\x19\x2a\x11\xfd\xa2\xd5\x0b\x77\xc0\x3e\xc9\xd2\xe9\x9a\x28\x36\x38\x2f\x86\xac\xcf\x0a\xbb\xf0\x0d\xcb\x6f\x62\xdd\x6a\x52\xf8\xd6\x43\xde\xdd\xcc\xdd\xf3\x38\x00\x1f\x9d\x16\x7c\x9d\x31\xcf\x52\x28\xb5\x15\xf2\x65\xe6\xf0\x18\xe6\xd3\x69\xe6\xed\x83\x6f\x69\xa6\x06\xb5\x5e\x18\xb0\x81\xfa\x66\x5e\x1c\x29\xec\x4d\xcb\x97\x9c\x13\x08\x4b\x20\xe3\x04\x8c\x67\xed\x53\xf2\xcc\x9c\x7c\x78\xfc\x0e\x9e\x3f\xea\xd9\xe9\xc3\xd7\x3f\xb3\xd3\xd8\x4c\x48\x89\x36\xe4\xbb\xd3\x17\x3e\x25\x39\x79\x10\xdd\xe7\x1c\x70\xea\x99\x8b\xc3\x72\xf8\x20\xc2\x6b\x04\x65\x5c\xa4\x85\xfd\x73\x58\x10\x91\x4a\x3c\x23\xac\xe2\xa4\x6b\x03\xa6\xee\x7d\xe1\x4e\xf6\xfe\x8d\xbd\x6e\x6e\x69\x4f\x3a\xf8\xa1\xd0\x7c\x8a\x2e\x7b\x71\x40\xa8\xa8\xae\x31\x8e\xce\x59\x4a\xf2\x75\x8a\x15\xf6\xf2\x76\x50\x98\x7e\xac\x8c\x9f\xc6\x9a\xea\x3c\x25\xa4\x77\xfd\x5c\xf8\x8e\x28\x82\xdc\xcf\x95\x34\xde\x82\xae\x5d\x90\x98\xe8\xf9\x6b\x3f\x72\x7f\x9e\xf4\xfd\x7f\x23\x5d\xba\x91\x2f\x57\xcf\xe1\x64\xe3\x10\x74\xcf\x4d\xf5\xbf\xdb\x93\xf0\x5f\x00\x00\x00\xff\xff\xb3\xdc\x15\x77\xb7\x13\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xd4, 0x65, 0xc1, 0x84, 0x66, 0x54, 0xe7, 0xd8, 0xc3, 0x87, 0x6d, 0x2a, 0x43, 0xf7, 0x38, 0x3a, 0xca, 0xc2, 0x2d, 0x55, 0x6c, 0xe0, 0xdc, 0x50, 0xbe, 0x1, 0x82, 0xe6, 0xb0, 0x7, 0x80}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\x3d\x57\xdd\x0b\x70\xe3\x84\x84\x84\xc4\x8a\x03\x70\x5a\xa1\xc8\xb1\xc7\x9b\xa1\x8e\x27\x8c\x27\x0d\xe5\xeb\x91\x9d\xa4\x0d\x65\xdb\x5d\xb8\x55\xf6\xbc\xf7\xe6\xbd\xe7\xe6\xc1\x72\x54\x8c\x5a\x77\xee\xf5\xb7\x4a\x8f\x3d\xc2\x5b\xd8\x24\x15\x8a\x8f\x9b\xaa\x3a\x5d\xe7\x9b\x6b\xf7\x14\x07\xa3\xc4\xb1\x56\xde\x63\xfc\x7b\xca\x61\xb2\x42\x7d\x1e\x29\xc7\x3d\x5a\xf2\x47\xd0\x16\x61\x0d\x87\x02\x07\xcf\x02\x81\x92\x16\x76\x41\x87\x51\xc9\x84\x17\xb3\xb6\x3c\x82\x32\xf4\xc2\x07\x72\x08\x67\x86\x42\x9c\x50\x0e\x64\x11\xf2\x4f\x65\x31\x8f\x98\x65\x30\xba\x9e\x29\xea\xff\x8a\x2c\xf8\x5b\x12\x3f\x7b\x92\x55\x82\x14\xf5\x2a\xfb\xd8\x62\x2c\xe9\x0c\x12\x40\x50\x07\x89\xe8\xa0\x39\x82\xa0\xb1\x2d\x8c\x14\x02\x4c\x7c\x99\x99\xa2\xa2\x58\xec\x95\xe5\x4c\xff\xe1\x7c\x98\x67\x72\x9e\x75\xc7\x6e\xb5\xc0\x47\x4a\x7a\xcf\xae\x50\x04\xb6\xa5\x81\x7f\xaa\x6e\x01\xdd\x30\x1d\x4d\xf7\xc4\xa3\xb9\xc1\x39\x63\x21\x03\x33\x01\x37\xdf\xd1\x5e\x6e\xfe\xa9\x1c\x4e\xbb\x5f\x70\x9d\xaf\xa0\x2d\x09\x57\x0f\xec\x7d\x42\xfd\x23\xf8\x37\xaf\xae\x2e\x31\x4d\x17\x4b\xda\x52\x02\xc1\x1f\x03\x26\xdd\x9e\x36\x2b\xe1\x27\xc4\x7d\xee\xbf\x8c\xcc\x90\x06\x3d\x0b\xe6\x8a\x5c\x96\xed\x86\xa0\xd4\x1b\xd1\x9a\xdc\x53\xff\x1b\xe2\xda\x9a\x10\x1a\x63\xf7\xab\xd6\xf8\xdd\x7c\x76\xe3\x6d\x18\x05\x65\xc7\x80\x07\x94\x23\x28\x75\x08\xe3\xa4\x0b\xce\xa8\x01\x2f\xdc\x41\xe2\x41\x6c\x89\x30\xd1\x2f\x7c\xa9\xfb\x3c\xfb\x9c\x77\x8e\xe1\x38\xa9\x05\xea\x48\xd1\xc1\xfc\x89\x28\xea\x59\x71\x64\xd9\xd7\x8e\xe4\xd9\xe6\x37\x9b\x6a\x5d\x7e\xc6\x81\x23\xb9\xf2\xa0\xb6\xb3\x63\xee\x51\xa6\x87\x57\xf6\x69\xb2\xf7\x60\x94\x0e\x78\xaa\xc4\x91\xec\xaa\x65\x0d\xb8\xff\xfa\xf9\x0b\x24\x35\xa2\x30\x92\xb6\x70\x57\x04\x26\xb2\xc5\xda\x2c\x97\x56\xb0\x85\xdd\xa1\x37\x43\xc8\xa1\xc3\x1d\x90\x87\xc8\x0a\x09\x75\x57\xbd\x67\x01\x9f\x2e\x29\xa0\x2c\x16\x1d\x8f\x09\xfa\x60\xd4\xb3\x74\xdb\xe2\xaf\xc1\xd6\x1c\x88\x05\x28\xc1\x10\x1d\x7a\x8a\xe8\x76\x55\x8e\xe1\x77\x00\x00\x00\xff\xff\xf7\x39\x51\x5d\x86\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xe9, 0x6d, 0x71, 0x8c, 0xb2, 0x32, 0x1c, 0x43, 0x4, 0xea, 0xe1, 0xa3, 0xcb, 0xc1, 0xfc, 0x98, 0xdd, 0x1d, 0xe1, 0x8d, 0xbc, 0x7e, 0x53, 0x73, 0x7f, 0x8f, 0x49, 0xa0, 0x66, 0xd2, 0x39}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
