// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/fields.toml (630B)
// ../definitions/info_object_meta.toml (1.497kB)
// ../definitions/info_storage_meta.toml (107B)
// ../definitions/operations.toml (4.403kB)
// ../definitions/pairs.toml (1.346kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc3\x40\x10\x44\x7b\x7f\x45\x94\x6f\x40\x74\x34\x74\x14\x08\x44\x0a\x8a\x08\xa1\xb5\xbd\x09\x0b\x89\xcf\x9a\x1d\x04\xe1\xeb\xd1\x9d\x13\xdd\x39\xbe\xd2\x6f\x9e\x77\x6e\x77\xdb\xda\x5b\xc3\xd3\xa8\xab\xbb\xd5\xfa\xfe\x10\xba\xaf\x07\x2a\x84\x01\xeb\xa6\xd9\xb6\xd6\xe7\xd4\x09\x1b\xf6\x67\xec\xd7\xfc\x5d\x00\x39\xc5\xb4\x77\xd6\x7e\x52\x20\x63\x05\xa6\x06\x1b\x7a\xfd\xcd\xdc\x06\x46\x7a\x54\x4a\x86\x1b\x06\xc8\x5e\x1f\x95\x12\xc3\x61\xa6\xdf\xde\x24\x26\x47\xad\x95\x86\x0c\x9f\xda\x4f\xed\xd2\xf4\xb0\xdb\xb9\xb2\x32\x25\xd8\xb5\x5e\x1e\x63\x14\x43\xb1\xf6\x73\xfc\x9c\x38\x58\x62\xf0\x42\x7d\x8e\xcf\x36\x3f\x6a\x2f\x1d\x6d\x2e\x97\xcd\xc5\xe1\x5e\x54\x7a\x4d\xd0\xed\x4f\x2b\x3b\x38\xba\xda\x78\xa7\xd0\x9c\xd6\x2d\xce\xba\xb9\x24\x93\x66\x0b\x01\xe5\x53\x9c\x01\xba\x54\x62\xf4\x8d\x43\xad\xf9\x27\xc3\x57\x18\x93\xfb\x1f\x00\x00\xff\xff\xab\x67\x1f\xe1\x76\x02\x00\x00")

func fieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_fieldsToml,
		"fields.toml",
	)
}

func fieldsToml() (*asset, error) {
	bytes, err := fieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0xd, 0x48, 0xb2, 0x4b, 0xc9, 0xdb, 0x61, 0xf5, 0x19, 0xdf, 0x4f, 0xfa, 0xb8, 0x12, 0x4a, 0xc0, 0x58, 0xb, 0xc3, 0x1a, 0x30, 0x9d, 0x11, 0xf5, 0x8f, 0xbe, 0x73, 0xdb, 0x3c, 0x20, 0xf7}}
	return a, nil
}

var _info_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x3b\x8f\xd3\x40\x10\xc7\xfb\x7c\x8a\x51\x9a\xab\x4c\x05\x74\x57\x20\x5d\x83\x44\x74\x48\x80\x28\x4e\x08\x6d\xb2\xe3\x64\x88\xf7\xc1\xec\xf8\x88\xf9\xf4\x68\x76\xe3\xc7\xd9\x16\xdc\x51\x25\xbb\xf3\x9f\xdf\xdf\xf3\xb0\x1f\x4c\x8c\xe8\x6d\x15\xea\x3a\xa1\x7c\xdb\x48\x17\x11\x6e\x61\x4b\x5e\xde\xbe\xde\x6e\x2c\xa6\x03\x53\x14\x0a\x5e\x6f\xdf\x65\xf1\x7d\xd6\x02\x25\x90\x13\x42\xc9\x84\x50\xe7\x53\xc1\x41\xd8\xff\xc0\x83\x6c\x37\x9b\x9e\xef\x5b\xb7\x47\xae\x9c\xb9\x90\x6b\xdd\x13\x9f\x85\xcb\xce\x5c\x7a\x4e\x49\x4b\x40\x7e\x20\x47\x64\xa3\xca\x09\x3c\xd1\x6f\x5c\x45\xaf\x94\x30\x81\x6b\x9a\x92\x23\xf2\xdf\xe8\x12\xc4\x34\xff\xeb\x91\x93\x07\xa7\x35\x97\x43\xf0\x82\x5e\xaa\x06\xfd\x51\x4e\x0b\xf4\x28\x70\xf6\xcd\x18\x4d\xc2\xe4\x8f\xd3\xb0\x46\xd6\xe2\x28\xe6\xb8\x76\x4f\x76\x79\x8b\x97\x18\x58\xe0\x16\x84\x5b\x9c\x57\xf5\xfe\xae\x1f\x79\xeb\xe9\x67\x8b\x70\xc6\x4e\x8b\x4a\x12\xd8\x1c\xf1\x95\x42\x1b\x93\xa4\x72\xc1\x52\x4d\x38\xe1\x0b\x39\xcc\x61\xf2\xe7\x4a\x0c\x1f\xa7\xab\xd6\x9b\xcf\xec\x3e\x90\x3f\x7f\xce\xd2\xde\x36\x75\x4e\x01\x50\x00\x50\x07\x86\x7c\x2e\xcb\x96\xfd\x5d\xb0\x93\x26\xdc\xe7\xc0\x2e\x58\x9c\x97\xb6\x79\x70\x6d\x23\x14\x0d\x4b\xb5\xd6\x88\xf9\x40\x7b\xf1\xd8\x03\x3d\x01\x59\xdd\xfb\xfc\x77\xfa\x10\x03\xfa\x85\x5b\xaf\xa2\x42\x2b\x89\xda\xdd\x01\xf6\x74\x6b\x46\x8f\x17\x2e\xe6\xe8\x91\x97\xd2\x62\x4d\x1e\x2d\xec\xbb\x7e\x8e\xbc\x86\x27\xff\x2c\x7c\x91\xfd\x1b\x1f\xcd\x74\xd3\x9f\xb5\x7d\x1f\x8d\x9c\xb4\xf7\x48\x72\x42\x2e\xdf\x9a\x7d\x0a\x4d\x2b\x3a\x0b\x39\x41\x28\x97\x8c\x8d\x11\x7a\xbc\x5e\x4a\xf8\x65\xd8\xa6\xde\xfc\x26\xc1\xd7\xc0\xe7\x3b\x62\xb0\xa8\xaf\x62\x82\xe0\xa1\x4d\xc8\x37\xfa\x8d\x89\x6d\x19\x60\x42\x7e\xa4\x03\x56\x0e\xc5\x58\x23\x66\x7c\x54\xe3\xbb\x45\xd5\x9f\x8a\x7a\x77\x15\x67\x2f\x4c\x70\x85\x0c\x2d\xe8\x61\x6a\xa0\x8e\x2b\xf4\xd2\x88\xef\xd7\x1f\x67\xe2\xc2\xeb\x4b\x42\x9e\x1b\x29\x6c\xe9\xf2\x27\x00\x00\xff\xff\x8c\x8e\xe3\x56\xd9\x05\x00\x00")

func info_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_object_metaToml,
		"info_object_meta.toml",
	)
}

func info_object_metaToml() (*asset, error) {
	bytes, err := info_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x22, 0x3, 0x91, 0xf9, 0xc2, 0xc4, 0x6e, 0x2b, 0x1e, 0xc6, 0xe, 0xa4, 0x62, 0x72, 0x3f, 0x13, 0xd2, 0x51, 0x84, 0x12, 0x80, 0x34, 0x83, 0xf3, 0x7d, 0xbe, 0xea, 0x96, 0xa5, 0x8d, 0x50}}
	return a, nil
}

var _info_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xce\xc9\x4f\x4e\x2c\xc9\xcc\xcf\x8b\xe5\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x2a\x2e\x29\xca\xcc\x4b\x57\xe2\xe2\x8a\xce\x4b\xcc\x4d\xc5\x14\x4f\xad\x28\xc8\x2f\x2a\x51\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x8a\x2e\xcf\x2f\xca\xd6\x4d\xc9\x2c\x22\xa4\x12\x10\x00\x00\xff\xff\x5f\xe0\xd4\x5a\x6b\x00\x00\x00")

func info_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_info_storage_metaToml,
		"info_storage_meta.toml",
	)
}

func info_storage_metaToml() (*asset, error) {
	bytes, err := info_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xd1, 0x40, 0x2c, 0xba, 0x2b, 0x76, 0x2b, 0x8d, 0x58, 0xb2, 0xa, 0x71, 0xa7, 0xb1, 0xb5, 0x96, 0x12, 0x28, 0xb9, 0x77, 0x6d, 0x13, 0xc5, 0x3a, 0x98, 0x62, 0x3e, 0x73, 0xf2, 0x73, 0x74}}
	return a, nil
}

var _operationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xcd\x8e\xeb\x36\x0f\xdd\xe7\x29\x08\x6f\xbe\x4d\x90\xdd\xb7\xbc\x8b\xfe\xa0\xbb\xa2\x45\xb7\x17\x83\x01\x23\xd1\x09\x7b\x65\x49\x90\xe4\xa4\xe9\xd3\x17\x94\x9c\xc4\xf1\x5f\x34\xb3\x18\x38\x12\xc9\x73\xc4\x43\x91\xf6\x77\xf4\x9e\xac\xa6\xf0\xb1\xd3\x14\x55\x60\x9f\xd8\x59\xf8\x06\x0d\x47\x48\x67\x02\xb6\x89\x42\x8b\x8a\xa0\x75\x01\x7e\xca\xd6\x10\xc8\x60\x22\x0d\xce\x53\x40\x71\x88\x87\x66\xb7\x7b\xc4\x3a\x38\x7f\x50\x81\x30\xd1\x67\x59\x9a\x05\xbf\xb2\x31\x50\x4c\x00\x2d\x14\x2b\x70\xc7\xbf\x49\xa5\x43\xb3\xf3\x18\xb0\x8b\xf0\x0d\xbe\x37\x1e\xd3\xb9\xf9\xd8\x05\x8a\xbd\x49\x65\xc9\x35\x1f\x13\xb0\x6b\xe0\x37\x58\x03\x82\x72\x36\x91\x4d\x90\xdc\x1b\x58\xd7\xec\xa1\x09\xf2\x2f\xf2\xbf\x34\x21\x60\x9b\x8f\x5d\x71\xfa\xec\x9c\x26\x01\x29\xa1\x66\x49\x70\x5d\xc7\x69\x3b\x09\xd9\x04\xd0\x6a\x68\xd9\x72\x3c\x8f\x88\xf9\xe0\x14\xc5\x38\x65\xb6\x01\x7e\x34\x4e\xfd\xa8\x15\xf3\x67\x31\x5e\xd3\x72\x88\x34\x92\x32\xaf\x6c\x2b\x09\x96\xae\x90\xed\xbe\xa6\xe5\x08\xac\x48\xb9\x81\x95\x0d\x5e\x84\x2c\x88\x9b\xfa\xed\xa1\x39\xb2\x7e\x2f\x63\x8e\x34\x3d\xbe\xeb\x8e\x6c\xb7\xcf\x5f\x4c\x0a\x91\x28\x69\xce\xf5\xb5\x5a\x58\x47\xd6\xb1\x0e\xdc\x70\x4c\x5b\xc8\xb2\x7f\x87\x3d\x92\x71\xf6\x24\x29\x49\x67\x8e\x2b\xe8\xaf\x29\x38\xf2\x06\x0d\xe5\x3c\xd7\xd6\xd2\x2f\xce\xdf\x0e\x4f\xa7\x92\x37\x7f\x5b\x4b\x97\xbf\x49\x7e\xfe\xc8\xc0\xe0\x02\x74\xbd\x49\xec\x0d\x0d\xa4\x81\x6d\xc6\x88\x14\x2e\xac\xe8\xf5\x0c\x31\x28\xc9\xa1\x8e\x29\xd7\x8e\xe6\x50\x4b\xf2\x57\x0e\xa4\x92\x0b\x85\x69\x76\x1c\xd5\xb7\xe6\x79\x98\x79\x75\x6b\x0e\x5f\xab\xed\x96\x92\x3a\xd7\x32\xfc\x4d\x8c\x33\xbb\xc1\x4d\xf8\xe5\xc7\x65\x6a\x79\x0b\xda\xe0\x3a\x40\x38\xf1\x85\x2c\xf4\xc1\x48\x09\x08\x9f\x05\x86\x7b\x68\xfa\x60\x32\xb1\xce\x5d\x6a\x69\xfd\xee\x2e\x94\x59\x65\x1f\xe1\x24\x0f\xcb\x94\x64\xe7\x59\xfc\x5f\x51\xb2\x14\x01\x86\x54\x4d\xeb\xee\xb0\xd6\xc4\x46\x11\x47\x42\x3f\x56\x2b\xe4\x7e\xd8\x56\xaa\x3d\x41\x2c\xdd\xec\x0d\xe0\x42\x47\x5b\x81\x9d\x77\x35\xb6\x9a\xfe\x99\xf5\xb5\x3d\x34\xe2\x3c\xbf\xdb\x79\x75\x21\x31\xae\xf3\x86\x2a\x52\x33\xd8\x8d\x19\x42\xef\x8d\x43\x9d\x27\x98\x72\x36\xa6\xd0\xab\xf4\xbc\xdd\x0b\x07\x10\xaf\x85\xf6\xb7\xc2\x2d\x77\xc0\x37\xbc\x72\x17\xcc\x61\xa7\x4d\x70\x35\x91\xaf\x29\xf3\x0b\x7d\xf0\xce\xc7\xe3\xa9\xb6\x20\xff\xc4\x13\x2d\xd4\x22\x5c\xcf\xac\xce\x10\x7b\xef\x9d\x14\x2b\x5a\xed\xba\x22\xfb\xe1\x81\x30\x2a\x50\xf9\x5d\x51\x9b\x62\xf6\xb5\x5e\xf4\x00\x2a\x75\xb9\x8e\x33\x2b\xc9\xe8\x49\x71\xcb\x0a\x5c\xdb\x46\x7a\x5b\x96\xc5\xea\xfd\xbc\x15\x06\x92\x81\x40\x58\xdf\x24\xff\x12\xe3\xc3\xc8\x4d\x4e\x94\x1f\x97\x0f\xe3\x83\xbb\xb0\x96\xac\x5d\xf1\xb6\x1f\xc4\x50\x68\x21\xfb\x64\x80\xca\x2c\xde\x5b\xe7\xd0\xcd\xe6\x7c\x25\x6a\x87\x6c\x13\xb2\x1d\x5d\x91\x98\x5c\x10\xb1\x06\xbf\xd2\x9c\xee\x41\x9e\xc2\x57\x68\x3e\x44\x0a\xc0\x36\x26\xb4\xd3\x8e\x6a\xb1\x9b\xbe\xac\x8a\x07\xbd\xb0\x16\x40\x4d\x72\x8f\x97\x01\xcb\x1e\x60\x25\xd8\x6b\xe0\x13\xad\xdc\xd1\x13\x25\x40\xb8\xa0\x61\x3d\x0f\x9c\x75\x5d\x9c\x11\xd5\x27\x92\x1e\xb0\xd1\x1d\xd0\x98\x39\x6c\x84\x5e\x5e\xd5\x4b\xab\x78\xc2\xbf\x82\x71\x81\x1a\x7c\xeb\x4a\x74\x22\x78\xd1\x7b\x88\x50\x9b\xfe\xc7\xfb\x51\x1e\xef\xb3\xe4\xe4\xbf\x51\x9d\xbe\x02\x74\x94\x50\x63\xc2\x65\x88\x40\xa9\x0f\x16\x54\x1f\x82\xdc\xef\x47\x5e\xee\x5e\xa3\x1c\xdc\x51\x64\xab\xf9\xd8\x19\xa7\xd0\xc0\x1d\x3c\x85\x9e\x26\xc0\xeb\x32\x0c\xa0\x45\x8d\x67\x43\x79\x7d\x51\x99\x9e\xca\x23\x87\x08\xcf\xe5\x32\x0d\x9c\x1e\xd7\xc4\x7d\xcf\xf1\x2c\x0d\x81\x70\xe5\xbb\x4b\x76\xb2\x70\x2d\x1b\xfa\x5f\x84\xe1\xd8\x8b\x34\xf6\xd0\x5c\x17\xb8\x4c\x9a\x9d\x4c\x63\xf7\xa9\xd0\x98\x23\xaa\x1f\x0b\xfc\xec\x8c\x5e\xf5\xb5\x1f\x5e\xa6\xae\x9c\xce\xae\x97\xe9\x7a\x03\xf4\x0c\x02\xb6\x9e\xbb\x59\x7e\x6a\xf4\x8b\x09\x57\xf4\x93\x1d\xc0\xac\x97\x4c\x04\xb9\xcf\x6c\x5b\x07\xae\x5d\xfa\xd6\xa9\x21\xf3\x8a\x9c\x67\xce\xd6\x38\x12\x89\x86\x6f\xab\xac\xda\x86\x5c\xe3\x2f\xf7\xa9\x6c\xc3\x54\xfb\x4c\x37\x9f\xe5\xbb\xff\xee\xf4\xff\xab\x34\xfc\x2f\x00\x00\xff\xff\x59\x2b\x55\xbc\x33\x11\x00\x00")

func operationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_operationsToml,
		"operations.toml",
	)
}

func operationsToml() (*asset, error) {
	bytes, err := operationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x59, 0xee, 0x4b, 0xfc, 0x73, 0x7d, 0x67, 0x6f, 0x4b, 0x78, 0x13, 0x60, 0x3a, 0xf2, 0xac, 0x59, 0x45, 0xe6, 0x69, 0xa, 0x56, 0x7d, 0x96, 0xa2, 0x10, 0x48, 0x9d, 0x2a, 0x1b, 0xd0, 0xee}}
	return a, nil
}

var _pairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x8f\xd4\x30\x0c\x85\xef\xfd\x15\x56\xcf\xab\xd9\x0b\x70\xe3\x84\x84\x84\xc4\x9e\x80\x13\x42\x55\xa6\x76\xb6\xd6\xa4\x71\x71\xdc\x29\xc3\xaf\x47\x49\xdb\x99\x02\x3b\xb3\x0b\xb7\x2a\xf1\xfb\x9e\xfd\x9c\x7e\x6d\x25\x1a\x45\x6b\x7a\x7c\xfd\xad\xb2\xd3\x40\xf0\x16\xea\x64\xca\xf1\xb1\xae\xaa\xf3\x75\xbe\xb9\x76\xcf\x71\x74\xc6\x12\x1b\x93\x03\xc5\xbf\xab\x90\x52\xab\x3c\xe4\x92\x72\x3c\x50\xcb\xfe\x04\xd6\x11\x6c\xe5\x50\xe4\xe0\x45\x21\x70\xb2\x42\x57\x42\x8a\xc6\x2e\xbc\x98\xda\xc9\x04\x26\x30\xa8\x1c\x19\x09\x2e\x84\x02\x4e\xa4\x47\x6e\x09\xf2\xa7\x89\xba\x47\xca\x36\x14\x71\x10\x8e\xf6\xbf\x26\xab\xfe\x96\xc5\x8f\x81\x75\x93\x20\x47\xbb\x4a\x9f\x3a\x8a\x25\x9d\x51\x03\x28\xd9\xa8\x91\x10\xf6\x27\x50\x72\x6d\x07\x13\x87\x00\x33\x2f\x93\x39\x1a\x69\x4b\x83\x89\x5e\xf0\x1f\x2e\x87\xb9\x26\xe7\xd9\xf4\x82\x9b\x06\x3e\x72\xb2\x07\xc1\x82\x08\xd2\x96\x0d\xfc\xd3\xea\x56\xd1\x8d\xa1\xa3\xeb\x9f\x78\x34\x37\x98\x8b\x16\xb2\x30\x03\xc4\xfb\x44\xf6\x5b\x6a\x6f\x5e\x5d\x25\xcc\xd5\xa5\x1f\xeb\x38\x81\xd2\xf7\x91\x92\xdd\x9d\xb1\x25\xb9\x44\x74\xc8\xcb\x2b\x25\x8b\x64\x4f\x5e\x94\x72\xbe\x98\x6d\xfb\x31\x18\x0f\x4e\xad\x61\x7c\xea\xd1\xb3\x34\xad\x0b\x61\xef\xda\xc3\x26\x72\x79\xb7\x9c\xdd\x58\xac\x33\x30\x41\x01\x3a\x92\x9e\xc0\xb8\x27\x98\x66\x5f\x40\x67\x0e\xbc\x4a\x0f\x49\x46\x6d\xcb\xfc\x89\x7f\xd2\x4b\xa7\xcf\xb5\xcf\xcd\x2e\x31\x9c\x66\xb7\xc0\x3d\x1b\x21\x2c\xff\x77\x71\xcf\x8e\x93\xe8\xa1\x41\xd6\x67\xd7\x56\xd7\xd5\x76\x73\x59\x07\xc8\x7a\xe5\x35\xdc\x2d\x13\xcb\x40\x3a\xbf\x9a\xd2\xcf\x3e\xcf\x1e\x9c\xf1\x91\xce\x2b\x41\xd6\x5d\xb5\xb6\x01\x0f\x5f\x3e\x7d\x86\x64\x4e\x0d\x26\xb6\x0e\xee\x8b\xc1\x0c\x5b\x47\x5b\xec\xd2\x46\xb6\xd2\x91\xbc\x1b\x43\x0e\x1d\xee\x81\x3d\x44\x31\x48\x64\xbb\xea\xbd\x28\xf8\xf4\x27\x02\x4a\x63\x11\x65\x4a\x30\x04\x67\x5e\xb4\xbf\x2b\xf3\xed\xa9\x73\x47\x16\x05\x4e\x30\x46\x24\xcf\x91\x70\x57\xd5\x75\xfd\x2b\x00\x00\xff\xff\x63\x67\x32\x3e\x42\x05\x00\x00")

func pairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_pairsToml,
		"pairs.toml",
	)
}

func pairsToml() (*asset, error) {
	bytes, err := pairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x82, 0x39, 0xfa, 0x3f, 0x1, 0x7, 0x7d, 0xaf, 0xfb, 0xd1, 0x87, 0xa5, 0xf8, 0x43, 0xf6, 0x69, 0xa3, 0x71, 0x7f, 0x12, 0xa3, 0xb1, 0xd3, 0xba, 0xdd, 0x72, 0x5d, 0x95, 0xbf, 0xf3, 0xcb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fields.toml":            fieldsToml,
	"info_object_meta.toml":  info_object_metaToml,
	"info_storage_meta.toml": info_storage_metaToml,
	"operations.toml":        operationsToml,
	"pairs.toml":             pairsToml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fields.toml":            {fieldsToml, map[string]*bintree{}},
	"info_object_meta.toml":  {info_object_metaToml, map[string]*bintree{}},
	"info_storage_meta.toml": {info_storage_metaToml, map[string]*bintree{}},
	"operations.toml":        {operationsToml, map[string]*bintree{}},
	"pairs.toml":             {pairsToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
