// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../definitions/infos.hcl (1.312kB)
// ../definitions/operations.hcl (4.773kB)
// ../definitions/pairs.hcl (2.058kB)

package specs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func infosHclBytes() ([]byte, error) {
	return bindataRead(
		_infosHcl,
		"infos.hcl",
	)
}

func infosHcl() (*asset, error) {
	bytes, err := infosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _operationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x74\x09\x50\x18\x3e\xb5\xbd\xed\x29\x40\x81\x1e\x82\x16\xd9\x43\x0f\x45\x60\xcc\x52\x23\x7b\x5a\x89\x14\xc8\x91\x9d\x4d\xb1\xff\xbd\x18\x4a\xb2\x3e\x2c\xc9\xd2\x62\x73\x08\x12\xf1\x0d\x67\xde\xe3\xf0\x71\xbc\x63\x2b\xe4\x33\x34\x04\x89\x71\x25\x93\x4f\xe0\xbf\x1d\x40\x4a\xc1\x78\x2e\x85\x9d\x85\x27\x48\x38\x80\x9c\x09\x3a\x70\xe6\x3c\x7c\x76\xe5\xeb\x21\xd9\xed\x00\x5c\x19\xa3\x5f\xeb\xd8\xbb\xe8\x2b\xe7\x39\xe8\x3a\xa0\x85\x3f\x5e\xfe\x21\x23\xe0\x3c\x14\x55\x2e\x5c\xe6\x04\xae\xfe\xc4\x36\x26\x09\xe4\x2f\x6c\xe8\x90\xc4\xad\x4a\xf4\x58\x04\x88\x7f\x9e\xe0\xef\x24\x78\x93\xec\x21\x49\x83\x24\xdf\x76\x00\x6f\xbb\xb7\x3e\x85\x94\xfd\x31\xe7\x20\xf3\x34\xaa\x40\x69\xac\x3e\x65\x4f\x46\x9c\x7f\x85\x17\xd4\x6f\x41\x9c\xc7\xd3\x2d\x3d\x88\x03\xdd\xa9\x29\x2e\x40\x65\x53\xf2\x80\x1a\xd7\x91\x56\xc4\x31\x65\xbf\x44\xdc\x93\x54\xde\xd6\x9b\x21\x84\x92\x0c\x67\x6c\x9a\x7d\xa6\x28\xea\x7e\xdf\xe2\x8a\xa7\x50\xe5\x12\x6e\x2b\x8e\xe7\x48\x07\x3a\x15\x64\x25\x7c\x34\xfb\x76\xdf\x11\x7d\x00\x2a\x5e\x28\x85\xde\xb9\xd4\x40\xd2\xd2\x47\xe2\xdc\x8a\x5b\x52\x69\x98\xed\xc2\xf8\x2e\x81\xc2\xa4\x40\x6c\x53\xfa\x7e\xec\x2a\x5c\xdd\xe1\x31\xb0\x55\xa8\x0e\x5f\x4b\x9e\x2d\xcb\x71\x90\x78\x89\xbd\xa2\xf5\x72\xcc\x25\xbc\xd7\xa0\x44\x39\xcf\x89\x40\xa7\x46\x85\xba\x94\xab\x67\xa1\xf5\xb5\x44\x38\xa0\x66\xd4\x3b\x29\x6e\x5b\x61\x9a\x7d\x0f\x89\xd7\xbf\x62\x94\xfe\x23\xf0\x0f\x9a\x3a\x99\xc2\x5d\xb6\x9c\xc7\x17\x77\xa1\xee\xf2\x69\xf0\x12\x11\x5d\xd7\xda\x3f\xce\x5e\x4a\x4f\x19\x7f\x5f\x7b\xc7\x6a\xf4\x46\x7b\xa9\x83\x46\x0e\x53\x7f\xfc\x50\x93\x69\xb6\xdc\xe2\x33\x0d\xfb\xad\x56\xb3\x4a\x86\x3b\x9f\xb9\xe9\xb0\xde\x6a\x46\xf5\xad\x76\x9b\xf7\x28\x34\x6d\x34\x9e\xd0\x9c\xb7\x34\xf4\x57\x0d\xe8\x0e\x3b\xc6\x2f\xd5\x5d\x7a\x77\xe1\x54\x6f\xe7\x15\x5f\xf7\x70\x3d\xb3\x39\x83\x41\x0b\x31\x32\x26\xa8\x1b\x6a\xbb\x6b\x54\x3e\x9f\xa2\x34\x72\xcd\xb8\x62\x31\x87\x27\x10\x5f\x51\x5b\x38\xbe\x38\x2f\x6b\xcc\x25\x02\xb5\x43\x1f\x7a\x48\xdf\xc1\x8c\x2b\xca\x9c\x84\xd6\x64\x68\xb1\x5d\x12\x40\x9b\x42\x41\xfe\x44\x2a\x50\xd1\x78\x1a\xfc\xc6\xf9\xac\x0b\xdc\xf2\x8f\xb4\x88\x4d\x3b\x7d\xbe\x7a\x0a\x05\xb2\x15\x64\xdb\x8c\x36\x6a\xa0\xa3\x86\x0f\xbd\x81\xc9\x13\xca\xa2\x81\xd5\x08\x40\xb0\x74\x6d\x37\xd2\x47\x29\x08\xda\x59\x07\xb3\x58\xd0\x5c\xd3\x8a\xf3\x34\x10\x36\x25\x95\x6a\xa9\x86\x1a\xa1\x62\x6e\xcd\xdf\xe6\x38\xd1\xe2\x79\x9d\x48\xfb\xe1\x82\x39\xa7\xf7\x39\xe2\x25\x59\x76\xec\x4d\x7c\xf5\xde\x3f\xf4\x05\xcc\xf3\xfb\x4a\x5a\x67\x92\x33\x87\x51\x45\xf7\x69\x27\xcd\x21\x08\x0a\x07\x61\xc3\x68\xd7\x3b\xc4\x73\x1b\x85\x79\xd7\x3a\xa1\xfb\xb8\x7c\x15\x2a\x2b\x6d\xb1\x9f\x02\xdc\xc2\xc2\x1e\x42\x65\xce\x80\x01\x9e\xf9\x07\xed\xe1\xb3\x22\x67\xe9\x34\x51\xd3\xa4\x6a\x9d\xd6\x13\x1a\x5d\x88\x8e\xd4\xfa\x5e\xbc\xfd\x88\xc8\xbc\x2b\x1e\xb4\xc7\xcd\xf1\xda\x16\x28\x48\x30\x45\xc1\x15\xaf\xa9\xa9\xbc\x57\xff\x68\x49\x7e\x0a\xd0\x46\xcf\x68\xa5\xcb\x83\x6c\x9e\x30\x5d\xce\x84\x69\x14\x29\xe3\x5c\x8f\xa8\xb7\xf7\x24\x93\x3d\x24\xd7\xa6\xdb\x4b\x64\x1f\xfa\xcf\xa2\xce\x58\x7b\x48\x5c\x96\x05\x92\x38\x83\x11\xa6\x47\x83\x79\xfe\x82\xe6\xdf\x63\x56\x59\x33\x73\x51\xec\xa0\x66\x3d\xf0\xa5\x9a\x75\x3d\xce\x87\x72\xd6\xf7\x5b\x2f\x30\xdb\xcc\x81\xcb\xba\x69\x6b\xfb\xfb\xe3\xee\x67\xd6\xc7\x53\xaa\xca\xd5\xfa\x79\x36\xef\xe7\xad\x74\x7e\xb5\x74\xcd\x91\x1f\x4d\x8e\x21\xe8\x07\xe3\xac\x90\x95\xa3\xbc\x96\xd4\xff\x7f\x91\xfe\xf2\x2e\xa9\xdf\x76\xbb\x8c\x29\x4f\xe3\xcf\xb7\x9a\xa8\x6e\xad\xfc\x82\x78\xb6\xa7\x64\xf7\x76\x43\xb4\xa6\x35\x8b\x20\x3f\xda\x83\xbc\x77\xbe\x07\xa8\x27\xf1\x01\x84\xad\xf4\x00\xb1\x73\x07\xeb\x3f\x3d\xd7\x1a\x7c\xd1\x95\x0e\x68\xef\x76\xf9\xf5\xe7\xfe\xb2\xda\xf1\x72\xb1\x6e\x94\xa7\xbe\xcc\x7d\x00\x4f\x22\x7e\x17\xf2\x28\x03\x5a\xf1\x20\x87\xe0\xc3\xe1\xf0\x27\xf2\x10\x24\xe7\x07\x25\xf5\x07\xec\x59\xd0\x48\x62\x76\x87\xaf\x84\x29\xf5\x53\xe9\xe0\x30\x00\x3d\x37\x03\x4b\x0f\x32\x26\xd7\x40\x26\xd8\xc5\xb6\x5c\x54\x5b\x7f\xae\x2c\x17\xdd\xb9\xf7\xe4\xe1\xde\x9e\x97\x41\xc8\x5d\x89\x8d\x01\x4e\xd5\x18\xdf\xd8\x21\xe7\xf6\x4d\xe8\x50\x3a\x5c\x2e\xd7\x79\xbd\x13\xf7\x2f\xbd\xe1\x71\x93\xff\x03\x00\x00\xff\xff\xde\x29\x2a\xd9\xa5\x12\x00\x00")

func operationsHclBytes() ([]byte, error) {
	return bindataRead(
		_operationsHcl,
		"operations.hcl",
	)
}

func operationsHcl() (*asset, error) {
	bytes, err := operationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x4b, 0x50, 0x96, 0xb4, 0xb6, 0x36, 0x1d, 0xb7, 0x5e, 0x49, 0xd2, 0x1c, 0x5a, 0x2b, 0xa, 0x80, 0x42, 0xf3, 0x54, 0x14, 0x76, 0xac, 0xad, 0xb8, 0x88, 0xd3, 0xfb, 0xa3, 0x62, 0xa8, 0x6e}}
	return a, nil
}

var _pairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcf\x6e\x1b\x39\x0c\xc6\xef\x7e\x0a\xc2\xa7\x64\x11\x38\x97\xdd\xbd\xe5\xb2\x0b\x14\xc8\xa1\x68\x80\xb6\xa7\xb6\x18\xc8\x12\x27\x26\x2c\x8b\x2a\xc5\xb1\x33\x2d\xfa\xee\x85\x34\x7f\x3c\x71\x26\xae\x11\x1f\x0c\x8f\xf9\xe9\xe3\x6f\x48\x4a\x5a\x44\x43\x02\x4b\xcb\x41\x31\x68\xb5\x73\xff\x2c\xe1\xe7\x02\x40\xdb\x88\x70\x07\xcb\xa4\x42\xe1\x71\xb9\xf8\x75\x22\xcc\xf1\x0b\x94\x4f\x3a\x11\xf5\x9f\xbb\x31\xb6\xfa\xbf\xd7\x2c\x00\x1c\x26\x2b\x14\x95\x38\x4c\x14\x40\x01\x8c\xf7\x20\xf8\xbd\xc1\xd4\x0b\x6b\xd3\x78\x3d\xb5\xfa\xcf\xd8\xed\xa3\x70\x13\xdc\xd5\xf5\x73\x08\x0a\x8d\xc9\xb6\x95\xf2\x16\xc3\x2c\xcf\xc0\xfe\x02\x23\x45\xb4\x54\xb7\xa0\x1b\x84\xa9\x17\x14\x2f\xa8\x59\xc0\x53\xd2\xca\x91\xc0\xf0\x3b\x0a\xd6\xf4\xb4\x9a\x40\x08\x3a\x0c\x4a\xc6\xcf\x26\xff\xeb\x18\x5f\x3d\x08\xef\xc9\xa1\x9c\x41\xd9\xf0\x01\x94\x21\x76\x4a\x38\x2e\x2e\x34\x09\x65\x4f\x16\x33\x4c\x52\x16\xf3\x88\xd9\x2a\x1a\x49\x28\xc7\xf2\x4f\x12\xe6\xc8\x11\x15\x83\x8b\x4c\x61\xbe\x6b\x43\xf0\x0d\x94\xc3\xd2\xcb\x19\x8f\xc9\x4e\x08\x9f\x22\x09\xce\xf2\x65\xee\xd7\x89\x0e\x1b\x0c\xa5\x8f\x8d\xe4\x79\xd2\x46\x02\x3a\x58\xb7\x20\x68\xec\x06\x0e\xe4\x3d\xf4\xe6\x2f\x69\xca\xe3\x7d\xf6\x1f\x38\x36\xaa\xb1\xb2\x9e\xf2\x66\xe0\x92\x2c\xcd\x77\x37\x0b\x3b\xdd\xea\x43\xaf\x9b\x81\xc4\x38\xce\x59\xef\x56\x4a\x95\x9f\xb3\x01\x74\x0e\xc7\xf4\x14\x14\xc5\x62\x54\x96\xe7\xdb\xf0\x7e\x12\x18\xd5\x9e\x6d\x19\xdb\xb7\x0f\xff\xe0\xf0\x6a\x03\x87\x54\xc1\xec\xe6\xbb\x73\x51\x9a\xde\x0e\x8a\xcb\xe8\xc9\x75\x9d\x70\x7e\x26\x29\xe8\xbf\x7f\x9f\x31\xed\x96\xf6\xb5\xa4\x34\x1c\x24\x37\x63\xa6\xd2\xf7\x84\xb8\xcd\xe3\x5a\x24\xfd\x92\x35\xd6\x2c\x98\xa7\xc3\x9d\x19\x88\x9c\x7c\xc0\xcc\xdf\x55\x64\x4f\xb6\x7d\xde\x93\x07\x43\xf2\xd0\xfd\x3f\x8a\xb3\x6f\x65\x8d\xf7\x6b\x63\xb7\x55\xdd\x04\x3b\xfb\x7e\x39\x70\xf5\xe5\xdb\xba\x55\xbc\x3e\x3b\xdc\x46\x41\xd9\x31\xe0\x1e\xa5\x05\xa5\x1d\xc2\xa1\xa3\x07\x67\xd4\x40\x2d\xbc\x83\xc4\x8d\xd8\x49\x61\x13\xfd\x78\x75\x2b\x9d\x2d\x6b\x5e\xf8\xa7\xa2\x72\xf0\x6d\x07\xe0\x69\x47\x8a\x0e\xfa\xcb\xa3\x00\x5d\x58\xd3\xde\xb1\xb2\xde\xa4\x74\xfe\xc2\x39\xb0\x6c\xf3\x41\xfc\xf6\xe9\xcb\x0e\x90\x8f\xf2\xf9\x21\xbf\xe9\x8b\xcb\x11\xa5\xdb\x0c\xe5\x3d\xd7\xb9\xcc\xde\x28\xed\x71\x9c\x21\x47\xb2\x82\x01\x08\xde\x7f\xfe\xf8\x09\x92\x1a\x51\x38\x90\x6e\xe0\xb6\x24\xe8\xcc\x86\x92\xf5\xe9\xd2\x64\xd9\xe0\x3e\xdc\x78\xca\x70\x0b\x54\x43\x60\x85\x84\xba\x82\xaf\x01\xde\xb1\x40\x9d\x4e\x5d\xa0\xb0\x05\xc7\x87\x04\xd1\x1b\xad\x59\x76\x37\xe5\x15\xd7\xb8\x31\x7b\x62\x01\x4a\xd0\x04\x87\x35\x05\x74\xe5\xae\xfa\x1d\x00\x00\xff\xff\x06\xe8\x87\x59\x0a\x08\x00\x00")

func pairsHclBytes() ([]byte, error) {
	return bindataRead(
		_pairsHcl,
		"pairs.hcl",
	)
}

func pairsHcl() (*asset, error) {
	bytes, err := pairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x89, 0x86, 0x32, 0x69, 0xa4, 0xee, 0x44, 0x46, 0xc4, 0x79, 0x3f, 0xcc, 0x58, 0xf1, 0x24, 0xce, 0x0, 0x7c, 0xc9, 0xdc, 0xb5, 0xba, 0xa2, 0x8a, 0xb, 0x64, 0x5a, 0xf0, 0x2d, 0xd7, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infos.hcl":      infosHcl,
	"operations.hcl": operationsHcl,
	"pairs.hcl":      pairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infos.hcl":      {infosHcl, map[string]*bintree{}},
	"operations.hcl": {operationsHcl, map[string]*bintree{}},
	"pairs.hcl":      {pairsHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
